$me = 4c&me;
!me and throw "no me";
$io = me.io;

window.reverse = &s{ return s.slice().reverse() };

#c hash stash, on t.sc[k]

window.ah = &tk{
    !isC(t) and throw "!C"
    # might accum into array at the end if k=[$k]
    $M = [... arguments].slice(2)
    isar(k) and $listend = 1; k = k[0]
    # into .sc.$k...@$M
    $nk = 'sc'
    # or in .c|y (making .sc.c... impossible)
    k == 'c' || k == 'y' and nk = k; k = M.shift()
    $h = t[nk][k] ||= {}
    while (M.length) {
        k = M.shift()
        k == null and debugger
        M.length > 1 and h = h[k] ||= {}
        else {
            $re = h[k]
            if (listend) {
                $N = h[k] ||= []
                $n = M.shift()
                !N.includes(n) and N.push(n)
                return N
            }
            else {
                !M.length and debugger
                $v = M.shift()
                # empty hash at the end ensures+returns hash
                if (isha(v) && !hak(v)) {
                    h[k] && (!isha(h[k]) || isC(h[k])) and throw "!{}||={}"
                    re = h[k] ||= {}
                }
                else {
                    h[k] = v
                }
                return re
            }
        }
    }
};
# hash lookup, on hash (not C)
window.ahsk = &h{
    $M = [... arguments].slice(1);
    while (h && M.length) {
        h = h[M.shift()];
        !h and return
    }
    return h
};
# hashes are identical
window.heq = &sd{
    return !hakd(s,d).length
};
# keys of differing values
window.hakd = &sd{
    $dif = {};
    each kv s {
        !hak(d,k) || d[k] != v and dif[k] = 1
    }
    each kv d {
        !hak(s,k) || s[k] != v and dif[k] = 1
    }
    $ks = [];
    each ko dif {
        ks.push(k)
    }
    return ks
};
#c array match
# if M, returns [not], puts M[matched]
#  eg N = arou(N,'acty',actyN) 
#    separates %acty to actyN from N
# else, returns [matched]
window.arou = &NyM{
    $matched = M || [];
    if (isst(y)) {
        # scgk or not match
        $k = y;
        y = &n{ return n.sc[k] };
        if (k[0] == '!') {
            $cb = y;
            k = k.substr(1);
            y = &s{ return !cb(s) }
        }
    }
    if (isar(y)) {
        # in array match
        $ray = y
        r = &n{ return ray.includes(n) }
    }
    if (M && !isar(M)) {
        # for an Nx.$k=N tape splitter
        !k and throw "dunno Nx k",M
        matched = M[k] ||= []
    }
    $not = [];
    each in N {
        y(n) ? matched.push(n) : not.push(n)
    }
    return M ? not : matched
};
# match N into one of several groups
window.aroh = &Nc{
    c ||= {};
    isst(c) and c = G&peel,c
    $h = {};
    each kn c {
        # matcher n is &s{} or a scgk
        n == '1' and n = k
        $M = [];
        N = arou(N,k,M);
        h[k] = M
    }
    h.N = N;
    return h
}

# interpret cv='','o2','32'
window.scaf = &ov,{
    !ov and return 0
    # ov=o2 -> 0.02
    if (isst(ov) && ov.substr(0,1) == 'o')
        ov = 1*('0.'+ov).replace(/o/g,'0')
    # ov=32 -> 0.32
    ov = sca(ov);
    return ov
};
# to make eg winding back the ov undoable
#  non-transactioney, keeps change if k unhad before
window.extemp = &cs{
    $set = {};
    each kv s {
        hak(c,k) and set[k] = c[k]
    }
    return &{
        each kv set {
            c[k] = set[k]
        }
    }
};

#c C-ish
# NaN*1 != NaN, yet isnum(NaN). also ""
window.num = s => (isnu(s) || s && s.length) && s*1 == s
window.isnu = s => typeof s == 'number'
window.isfu = s => typeof s == 'function'
window.isst = s => typeof s == 'string'
window.isar = s => s && s.constructor == Array
window.isha = s => s && typeof s == 'object' && !isC(s)
window.isob = s => s && typeof s == 'object'
window.isR = s => isC(s) && sy&R == s
window.hasR = s => isC(s) && sy&R
# < G&C, babz: = C yadda @3
#   and to parse args for eg opeolo
#   has a lot to do with:
window.Cye = &s{
    s = G&Cye,s;
    s.y = {cv:s.y.cv};
    delete ss&z;
    s.t == null and debugger
    typeof s.t != 'string' and s.t = ""+s.t
    return s
};
# make fraction of 1
window.sca = &s{
    s *= 1;
    while (s >= 1) { s = s / 10 }
    return s;
};
# round to decimal places
window.dec = &s,precision{
    null == precision and precision = 4;
    $mul = '1e'+precision;
    return (s * mul).toFixed() / mul
};
# ac() also replacing nc&b with n
#  as Cupon %down=[], recycled selves
window.bac = &Rkr{
    $N = R.sc[k] ||= [];
    $b = rc&b;
    if (b) {
        $bi = N.indexOf(b);
        bi >= 0 and return N[bi] = r
    }
    $ni = N.indexOf(b);
    ni >= 0 and return N[ni] = r
    N.push(r)
};
#c fio|fiu
# read spacey t, or insert C = y()
window.fio = &qty{
    !isC(q) and throw "NotC"
    qs&z ||= [];
    qy&tw ||= {};
    y != null && y == 0 and $readonly = 1
    y == '9' and $deletes = 1; y = null
    typeof t == 'object' and $obj = y = t; t = null
    $ar = y && y.constructor == Array;
    y && t == null and t = ar ? y [0] : y.t
    y != null && y == 0 and $readonly = 1
    
    $s = qy&tw[t];
    # allow removing from qs&z
    #  without tw if deleting given C
    $si = obj && deletes ? qs&z.indexOf(obj)
        : s && qs&z.indexOf(s);
    si < 0 and s = null
    if (deletes) {
        si < 0 and return
        qs&z.splice(si,1);
        delete qy&tw[t];
        return
    }
    if (!s && !readonly) {
        s = y ? ar ? G&Cye,y : y : G&Cye,[t,1]
        !qs&z.includes(s) and qs&z.push(s)
        qy&tw[t] = s
    }
    s and ss&z ||= [];
    return s
};
# fio() setting y&up, saying c.el
# < more than one level
# < io pipes A to A!
# making ny&up=s on el=1
me.fiu = &acgtstc{
    !isC(s) and throw "fiu!C"
    c ||= {};
    isnu(c) and c = {el:c}
    # read only
    $n = fio(s,t,0);
    # 2 must be new or same (see lv el:2 == only such t)
    if (c.el == 2) {
        if (n) {
            # < resolve $n order
            n == t and return n
            throw "already i", n
        }
        c.el = 1
    }
    # 7 must be there, 8 read only
    c.el == 7 && !n and throw "No "+s.t+"/"+t
    c.el == 8 || c.el == 7 and return n
    !n and c.el ||= 1
    else {
        # if we were placing a different object
        isob(t) && n != t and c.el = 1
        # remove the one we found
        c.el == 1 || c.el == 9 and fio(s,n,9)
    }
    if (c.el == 1) {
        $n = fio(s,t);
        # inputting sets y&up
        ny&up = s
    }
    return n
};
# C usu sort by cv,t
window.tvsortz = &z{
    z.sort(&ab{
        return (ay&cv||0)*1-(by&cv||0)*1
            || ('' + a.t).localeCompare(b.t)
    });
    return z
}
window.vsortz = &zy{
    !y and y = a => ay&cv
    $sy = a => (y(a)||0)*1
    z.sort(&ab{
        return sy(a)-sy(b)
    });
    return z
}

