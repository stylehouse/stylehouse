# fangs!!!
# < distributed R:Ying-nesses
me.Yingmind ||= {};

 // &Jx etc - ->
    # expressions for
    me.Jx = &acgtRc{
        R ||= Cy&R
        $C = Rs&C;
        $x = Cye(["x:"+R.t,22])
        # 2 degrees of local Js by name, c/sc R/s
        # the 4
        xc&Ying = me.cbu(R,'Ying')
        !xc&Ying and throw "!Ying"
        # the 3, eg Travel, aka Step
        xc&Step = me.cby(R,'^^Ying')[1]
        !xc&Step and throw "!Step"
        
        # the 3, eg Travel/$t, aka client
        $client = me.cbu(R,'client');
        if (client) {
            # they remember they are
            me&reaw,client,'client',1
            # they have children to know
            xc&client = client
        }
        
        c and ex(x.c,c.c)
        
        #  %client/* etc are named
        each tr x.c {
            x.sc[t] = rc&s
            me&ioty,r,'ball' .map(&n{
                x.c[n.t] = n;
                x.sc[n.t] = nc&s;
            });
        }
        
        #  %client may specify another R,
        #   eg Travel/$t/$tid%SummerCat%client=$t
        #    keep named $tid%SummerCat/*
        $p = client && clients&client
        if (hasR(p)) {
            p = me&yfuture,p
            xc&clienting = xc&client
            xs&clienting = xs&client
            xc&client = p
            xs&client = ps&ball && pc&s
        }
        
        # < contextualised modulata/expressiona: x.ro, etc
        #   see &columns
        # click act
        x.ro = &kc{
            c ||= {once:1};
            c.k = k;
            return me&rolltog,R,c
        }
        
        # < brackimply: sets x.zaa etc to dome:plans or etc
        #   you: x.doming = 'plans' # etc per S
        return x
    }
    # send attention via Ying &waits_8
    #  no trace left in r, not like &nodee
    #   although most cases of this could be,
    #   eg Jproto elvises %%now to Jrunto,
    #    which process them and return an answer
    me.Yingwant = &acgtrsc{
        $R = me.cbu(r,'Ying');
        c = ex({waits:r,wants:s},c||{})
        me&ha,R,c
    }
    me.Yingerr = &acgtRetc{  
        $n = G&Cye,[t||'error','',{er:e}];
        nc&s = (e.message || e)+'';
        ns&now = Gtime();
        ns&A = A;
        ns&B = Gc&B;
        ns&R = R;
        nc&s.match(/^async/) and ns&async = 1
        else
        # < fix this... not realising its not ready?
        nc&s.match(/^no way:/) and ns&async = 1
        # bunch of artifaces, < (t,$s)+
        e.tc and nc&M = e.tc
        return n
    }
 
 // object methods
    # call zy&$t, with ACGT
    me.yyt = &acgtzt{
        $y = z.y [t]
        !y and return
        return y(A,C,G,T,...[...arguments].slice(6))
    }
    # callback eg Lc&then(L,R)
    #  L%had_ccb.then knows it happened
    #  el=1,2 insist on calling only once, 2 fataly
    #  returns true if there is|was such a callback
    me.ccb = &acgtstc{
        !num(c) and throw 'ccb mode'
        c = {el:c}
        
        $had = ss&had_ccb ||= {}
        $was = had[t]
        $is = s.c[t]
        !is and return 0
        if (was) {
            c.el == 2 and throw "dup ccb",t
            else
            c.el <3 and return 1
        }
        is(...[...arguments].slice(7))
        had[t] = 1
        return 1
    }
  
    # pseudo OO: D is of me.$t.* wrappers in Dy&*()
    #  without ACGT coming across:
    #   D remains in itself, which may have finished
    me.methods = &acgtt{
        $args = [...arguments].slice(5)
        # args for always, passing this|self|D
        $D = args[0]
        # object = ^ data + v code that knows about it
        $fact = me[t]
        !fact and throw "!me."+t
        $l = haks(fact)
        each ik l {
            $y = fact[k]
            # it may be &Yome, Function.toJSON is from NutGravy encodings
            !isfu(y) || k == 'toJSON' and continue
            D.y [k] = me&methargs,t,k,args
        }
    }
    me.mearg = &acgtt,args{
        !me[t] and throw "!me."+t
        # + arguments for this call
        return me[t] (A,C,G,T,...args)
    }
    me.methargs = &acgttk,args{
        !me[t] and throw "!me."+t
        !me[t][k] and throw "!me."+t+"."+k
        return &{
            # + arguments for this call
            return me[t][k] (A,C,G,T,...args,...arguments)
        }
    }
 
// Y:n, osc
 // n 1: A meets J
        me.Yingmind.n = &acgt{ return [
        # s = C
        # < many C in one n, implied layer of doming
        ['ground',0.01,&acgtRYs,SC{
            sy&R = R;
            Ys&leamity = 3;
            if (sc&W) {
                $to = Ys&to;
                !to and throw "!to"
                sc&J ||= me&fiu,to,s.t;
            }
            if (!Y.4) {
                # A=Y must serve G&t for A.I, have 4s&globals
                Y.6 = Y.4 = A.4;
                Y.7 = A.5;
            }
            if (sc&J) {
                Y.1 and Y.2 = Y.1
                $J = Y.1 = sc&J;
                # < &t search J.1-4, then J.4.5-
                sex(J,Y,[1,2,3,4,5,6,7])
                # < want Jhost t&w:J.t
            }
            if (sc&e) {
                $e = sc&e;
                # < see if any dome:e contain e Asip,
                #   or any along e cby, where it has been
            }
        },'ift,D'],
        # ghost suction
        ['realise',0.2,&acgtRYs,SC{
            if (sc&J) {
                # < Jy&Y
                me&Yingbal,'J:'+s.t,s
            }
        },'ift,D'],
   
 // n 5: A embodies J
        # atom -> atoms
        ['tick',0.5,&acgtRYs,SC{
            $C = s;
            s = Cc&s;
            T.nN = [];
            $D = Ys&Doming = me&Yingdome,R,Y,C;
            $Aye = A;
            A = Y;
            1s&N = [];
            if (c&J) {
                $pin = c&W;
                !pin and throw "huh"
                ~>5 midR: pin, R.t
                me&way,R,pin,{J:A.1,s}
            }
            A = Aye;
            Dy&ending()
        },'ift,D'],
        ['tock',0.7,&acgtRYs,SC{
            $D = Ys&Doming;
            $t = Ys&osc = me&Yingosc,R,s,D;
            #me&nu,"Toosc",{s,t}
            # if this has a diff it can takeover a branch
            A = Y;
            if (ts&top) {
                $op = 1s&top = ts&top;
                if ('osc' == 'out replaces Cz in...') {
                    sy&tw = {};
                    ss&z = [];
                    me&ioty,op .map(z => me&fiu,s,z )
                }
                1s&hold and return
                sy&A = Y;
            }
            else {
                # unfinished
                1s&N.push(Y)
            }
        },'ift,D'],
    ]};
 
 // n 8: A over time
    me.Yingmind.Yardiale = &acgt{ return [
        # C
        ['osc',0.01,&acgtRYs,SC{
            return Cye(['Yaer:'+s.t,3])
        },'ift,D'],
        ['osc',0.3,&acgtRYs,SC{
            ss&gotto = 3
        },'ift,D'],
        ['osc',0.7,&acgtRYs,SC{
            ss&gotto = 7
        },'ift,D'],
    ]}
 // &Yingdome
  # &logdome used for Story following %Outlog,
  # usu just &ydome once, taking T.nN, eg Y:n/tick@5
  #  not &Ying_Schema entry, which &ydome
  #  see also &boxcap
  // frontends
    # N = %Ying%Outlog tracking
    me.logdome = &acgtRs{
        $D = me&Yome,R,s
        # < doing something about chathing
        #   probably mean reset
        Dy&download = &c{
            c ||= {}
            $N = Dc&thing
            !N and throw "!thing"
            $sc = {}
            N != Dc&last_thing and sc.chathing = 1; Dc&i = -1
            Dc&last_thing = N
            # from where we last got to
            N.length > Dc&i+1 and sc.N = N.slice(Dc&i+1)
            Dc&i = N.length - 1;
            if (sc.N && c.until) {
                # avoid from the current -gate
                $ui = sc.N.indexOf(c.until)
                ui >= 0 and Dc&i -= hak(sc.N.splice(ui))
            }
            return sc
        }
        return D
    }
    # A:n having S
    # ie the whole attention span
    me.Yingdome = &acgtRYs{
        $D = me&Yome,R,s
        me&Yingbal,'%Doming',D
        
        # grounds adopted from recent: n ...
        Dy&download = &{ return me&ydome }
        
        # Section deciver
        Yc&Srupto = &acgtst,talk,params{
            #~Srupt: s, ':', t, '%', talk
            
            # whatever is over now:
            Dy&domed();
            # various minds:
            A&Sonly && num(s) && s != A&Sonly and return 0
            A&ioing and return A&ioing.next()
            # vaguely named:
            t ||= s;
            # to happen once:
            A&doings ||= {};
            $l = A&doings[t] ||= {};
            if (l.done) {
                l.done < 2 and Dy&domed()
                l.done = 2
                return
            }
            l.done = 1;
            Dy&dome(t);
            #~sttalk: ki([s,t,talk,params]);
            return 1;
        };
        
        return D
    };
  
  // middling
    # D/$domet/* articcumulate
    me.Yome = &acgtRs{
        $D = me&Yong,R,s,'Doming',{},1
        me&methods,'Yome',D
        
        # before the first S
        #  %light vanishes if empty
        Dy&dome('beginning','light')
        return D
    }
    # for a S+ay
    me.Yome.dome = &acgtDtc{
        isst(c) and c = G&peel,c
        c ||= {};
        c.t = t;
        return Dy&current = me&Yong,R,D,'Dome',c,1
    }
    # or after them:
    me.Yome.ending = &acgtDc{
        Dy&dome('ending','light')
        Dy&domed(c)
        me&Yong,R,D,{},2;
    }
    # Dome@13 loads continuously
    me.Yome.stream = &acgtDc{
        !Dy&current and Dy&dome('middling','light')
        !Dy&download and throw "Yome!y&download"
        $sc = Dy&download(c)
        isar(sc) and sc = {N:sc}
        Dc&ignoring || !hak(sc) and return 
        sc and me&Yong,R,Dy&current,sc,-13
    }
    # commit current
    me.Yome.domed = &acgtDc{
        Dy&stream(c)
        me&Yong,R,Dy&current,{},2
        Dy&current = null
    }
  
  // Y:Doming/Y:Dome
    # < turn into something
    # < slep
    me.Yingmind.Doming = &acgt{ return [
        # C
        ['ground',0.01,&acgtRYs,SC{
            return Cye([s.t,3])
        },'ift,D'],
    ]};
    # piece of things
    me.Yingmind.Dome = &acgt{ return [
        ['ground',0.01,&acgtRYs,SC{
            $t = Ys&t;
            !t and throw "!t"
            $was = me&fiu,s,t,8
            was and 'divide domed finer than dome t?'
            $z = me&fiu,s,t
            was and zs&domeding = (zs&domeding||0) + 1
            return z
        },'ift,D'],
        ['ground',0.13,&acgtRYs,SC{
            each in Ys&N {
                ac(s,'z',n)
                #~>7 Dome: s.t, n.t
            }
        },'ift,D'],
        ['ground',0.2,&acgtRYs,SC{
            Ys&light && !ss&z.length and me&fiu,sy&up,s,9
        },'ift,D'],
    ]};
 
 // &Yingosc
    me.Yingosc = &acgtRsD{
        $s = me&Yong,R,s,'osc',{D:D}
        me&Yingbal,'%osc',s
        me&Yong,R,s,{},9
        return s
    }
    # < C from dome or so
    me.OsC = &acgtsDc{
        c ||= {};
        # < indo should use c, so c.O after is first
        $first;
        me&indo,D,c (&nd{
            $O = Cye(n);
            Oy&n = n;
            d.O = O;
            first ||= O;
            d.only and d.nofurther = 1; return
            # < flatten later, when swims back
            #   to keep both zeal%of:i and zeal%of:J
            #   so such a thing can be considered by the encoder
            $p = d.up && d.up.O || s;
            $dup = me&fiu,p,n.t,8;
            # < merge, io
            # < brack this so we old,neu
            dup && p == s and ac(s,'dups',dup)
            me&fiu,p,O;
        }) [0];
        return first
    }
    me.Yingmind.osc = &acgt{ return [
        # C
        ['osc',0.01,&acgtRYs,SC{
            return Cye([s.t,3])
        },'ift,D'],
        
        ['i Domings',0.5,&acgtRYs,SC{
            $Doming = Ys&D;
            each i,Dome Domings&z {
                each in Domes&z {
                    me&OsC,s,n
                }
            }
            # A:n magnet, was T.op, 1s&top etc
            $p = sy&up;
            $Yp = py&Y;
            Ypc&t != 'n' and throw "!n"
            
            $t = Ys&top = me&OsC,s,p,{only:1};
            # < ty&Y? per &Yong (argable A)
            #   each osc could coopt $t as far as it is worth keeping,
            #   eg for shared objects that dont need to pull,
            #    ie t@2 (get via J) to download new object with changes
            ty&osc = s;
            Yc&M = [Ys&top,...(ss&z||[])];
        },'ift,D'],
      // 6 swims
        ['o swims',0.6,&acgtRYs,SC{
            
            #~>4 sea: Y.t, s.t
            $C = s;
            $s = Ys&returns;
            
            # %of travel to W:of for encoding!
            $swims = {of:'i'}
            each kt swims {
                # < ha,Y,eto:W,t:s&of,W:of
                #   W routing to Jproto,
                k == sc&W and continue
                C.sc[k] == 1 and C.sc[k] = t
                C.sc[k] && !C.c[k] and ah(Y,['swims'],k,C.sc[k],C)
                # many per J
                $J = s&J;
                if (J) {
                    $z = Js&top || Js&z || [];
                    me&ioty,z .map(&n{
                        nc&W == k and ah(Y,['swims',k,C.sc[k],n])
                    })
                }
            }
        },'ift,D'],
        
        ['i swims',0.62,&acgtRYs,SC{
            !Ys&swims and return
            
            # < making swum (via J) not travel for enlightenment
            each ktN Ys&swims {
                t == 1 and t = 'i'
                # Y%of=Y:voy, whole bunch of elvising
                $E = Y.sc[k] ||= me&Yingvoy,R,s,'swim',k
                me&Yong,R,E,'swim',{t,N},1;
                # to each thing
            }}
            
            # < tug
            each in Ys&swim {
                me&Yong,R,n,{},7;
                each iz ns&swum {
                    me&OsC,s,z
                }
            }
        },'ift,D,self'],
        
      // 7 out
        # osc/* -> top/*
        ['selfs',0.7,&acgtRYs,SC{
            # < the main thing, osc may other
            $t = Ys&top;
            me&ioty,s .map(n => me&OsC,t,n )
        },'ift,D,self'],
        ['selfs',0.77,&acgtRYs,SC{
            
            $t = Ys&top;
            $d = {};
            d.compLines = &D{
                delete Dc&J
            }
            # W.1
            $one = me&Lineso,t,d;
            # whole bunches of Lines.join("\n")+"\n"
            !one.endsWith("\n") and throw "&Lineso!\n$"
            ah(s,'store','W',one);
            d.dige = dig(one);
            
            # < W.5, dep for a single W:of inc. w:JaBabz.
            #  < backporting JaBabz,Wud for StyleAgent?
            
            # W.js
            me&ioty,t .filter(n => nc&W == 'of') .length
                && ah(s,'store','js',me&jsso,t,d )
            
        },'ift,D,self'],
        ['selfs',0.9,&acgtRYs,SC{
            # where s is this view of it and more (rolling domes)
            ss&top = Ys&top
        },'ift,D,self'],
        
    ]};
   
 // &Yingvoy - osc elvis leaving
    # < make a variant of Yingdome, for loading eg swim
    me.Yingvoy = &acgtRstk{
        $s = me&Yong,R,s,'voy',{k},1;
        me&Yingbal,'Y:voy:'+t+':'+k,s
        return s
    }
    # < vague sharable slep, Copy Lines, lv
    # < C.t == null should throw
    me.Yingmind.voy = &acgt{ return [
        # elvis stilling out
        ['elvoy',0.01,&acgtRYs,SC{
            !Ys&k and throw "nok"
            $U = sy&Y;
            !U and throw "nestY"
            $z = Cye([Ys&k,3]);
            ac(U,'swim',z)
            return z
        },'ift,D'],
        ['elvoy',0.13,&acgtRYs,SC{
            # picture each t:Wof
            Yc&M = ss&z;
        },'ift,D'],
        ['elvoy',0.2,&acgtRYs,SC{
            sc&W = Ys&k;
            sy&cv = 0.001;
        },'ift,D'],
        ['elvoy',0.21,&acgtRYs,SC{
            me&Yong,R,s,{},7;
            # < Y.1 already, enclosing J namespace
            me.cby(s,&s{
                sy&Y && sy&Y.1 and return Y.1 = sy&Y.1
            })
            sc&J = me&fiu,Y.1,s.t;
        },'ift,D'],
        ['elvoy',0.23,&acgtRYs,SC{
            # they all %%string
            #sy&toLines and throw "hadLines"
            sy&toLines = me&indo,s (&s,d{ return sy&toLines });
            # this now a c&W to elvis, slept by %string
            
            $n = me&Zeve,R,s
            !n and T.hwack = "Y:voy:"+s.t; return
            $e = ns&e;
            !isC(e) and throw "reb"
            ss&e = e;
            # incorporate that
            !es&z and throw "Weird"
            # e:of is about several n:W:ofs
            $N = ss&swum = [];
            # < should use OsC that spots c&J?
            #   want to log J use
            each in es&z {
                # elvoys:n still origin, top made clean
                $J = nc&J;
                $top = Js&top;
                topy&cv != ny&cv and throw "*moted by peer"
                N.push(top)
            }
        },'ift,D,self'],
    ] };
    me.Yingmind.swim = &acgt{ return [
        ['elvoys',0.01,&acgtRYs,SC{
            # < exp lang
            $t = Ys&t;
            !t and throw "!t"
            $z = me&fiu,s,t
            $N = Ys&N;
            !N and throw "!N"
            Yc&M = N;
            return z
        },'ift,D'],
        ['elvoys',0.2,&acgtRYs,SC{
            $p = Ys&returns;
            !pc&W and throw "What"
            # may have Lines already, see 'variant of Yingdome'
            (sc&W ? ss&z : [s]).map(&n{
                $dup = me&fiu,s,n.t,8
                #dup and ac(s,'dups',dup)
                dup && dupy&cv != ny&cv and throw "cv"
                
                # < clone deeply
                $K = Cye(n);
                Ky&O = n;
                Ky&Y = Y;
                # may mix from $W/*
                s != n and Ky&W = s
                
                me&fiu,p,K
            })
        },'ift,D'],
        ['elvoys',0.21,&acgtRYs,SC{
            tvsortz(ss&z);
            Yc&M = [s,...ss&z];
        },'ift,D,self'],
        ['K',0.22,&acgtRYs,SC{
            # encoding advice
            $d = {jsony:1}
            me&Lineso,s,d;
        },'ift,D,self'],
    ] };
   
 // &Zeve - Y e to ^^Proto
    # supposing e=s and sc&W
    me.Zeve = &acgtRsaq{
        
        $p = me&Rsc,R,'^^Proto';
        # < o $s^^y&Ys&plan
        # be from Jrunto's plan to n, reoccurs after async
        $sup = me.cby(s,&s{
            $Y = sy&Y;
            return Y && Ys&plan
        });
        $Cn = sup[0];
        $Yn = Cn && Cny&Y;
        $plan = Yn && Yns&plan;
        !plan and throw "n!plan", sup
        
        # the question (gets .e=s in &nodee)
        q ||= {};
        q.dome ||= plan
        # recycles e
        sy&toLines and q.dige = dig(sy&toLines)
        
        sy&timese ||= 0;
        sy&timese++;
        
        return me&nodee,R,p,s,{},q
    }
    