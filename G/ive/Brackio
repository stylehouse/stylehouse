# sentences of stuff
  // < brackism, for Dome (frontend|feature)
    # see %%acty, %%may, %%wants, %%waits
    #  not the usual row of stuff
        # < bracktricks:
        #  ha ...uniq - not if exactly like another row
        #  transmit - solving %%may or %%wants
        #   to be rolled into %wou early
        #  ha waits... - could arrest Ring:r,
        #   < wants Rc&ip.contains()
        #  7 wants:n,acty:1,settled
        #   acty transmit to $n,
        #   waits for it to settle
        #  ta - ternary ja $want ? ha $consequence : ha $waitsish
        #  conseq - for the above, and %%may
        #    hangs up the ja(expression),
        #     we can tell if the rows were transmit to it etc
   // may
    # posit edge of a work
    #  having a phase to interlock
    # q describes a possibility of an act
    # a what's needed to complete it
    # might solve immediately, bracking no %%may
    # eg from %twin & &nodeo:
    #  t=input, a=s, q=tw,Qc&* etc...
    # ! doesnt put %%may somehow?
    me.may = &acgtRtaq,qe{
        isst(a) and a = G&peel,a
        isst(q) and q = G&peel,q
        a.may = t;
        # may:t+q 
        # the question %%may,...
        q = ex({may:t},q);
        ex(q,qe);
        # the answer ..,%may
        $N = me&jaa,R,a
            .filter(n => haks(n.sc).slice(-1)[0] == 'may');
        if (N && N.length) {
            # a-found rows
            # < merged with q?
            # < ha with %%indeed, which noops the may+waits
            return N
        }
        q.may = t;
        me&ha,R,q;
        return []
    };
 // physics
  
  // bracki|o
   // bracki
        # brack into j%($k||='wou') ||= C:stuff%z%X
        # < future ha: n %thing,etc
        me.bracki = &acgtjz,s,shade,mix{
            !z and throw "noz"
            
            isst(s) and s = G&peel,s
            shade && isst(shade) and shade = G&peel,shade
            mix && isst(mix) and mix = G&peel,mix
            # s can be a row, pipelined
            if (isC(s)) {
                $os = s
                s = ex({},s.sc)
                mix && mix.nodeial and delete mix.nodeial; delete s.efrom; delete s.eto
            }
            isar(s) and throw "many of these"

            # listed
            $n = Cye(['stuff',1]);
            n.sc = s || {};
            
            # mix shade -> n.sc for a while
            shade || os and me&brackshade,n,shade,os
            # row pipelined around
            os and ny&up = os
            ny&brack = z;
            ny&R = j
            T.act and ny&act = T.act;

            # mix mix -> n.sc
            each kv mix {
                n.sc[k] = v
            }
            
            ns&dome and me&dome_bracki,j,n

            # index n.sc.*=*
            $X = zs&X ||= {A:j}
            me&brackX,[n],X;
            # also|totally just z/n
            ac(z,'z',n);
            zs&z.length > 6000 and throw "Giant brack",s
            # < could know its siblings
            #  < joining to another X.* partition out there,
            #    so our queries can climb through their objects
            # < return bracki localised to s, defaults and more
            return n
        }
        # to get rows piped around, grown + washed
        me.brackshade = &acgtn,shade,os{
            # track non-essential k/v, still in n.sc
            #  shaded n.sc don't inherit through ha(n)
            # < we could also put separate row linked to n
            #    {n,layer:'somesuch',...h}
            #   then bracko may include the somesuch layer
            #    of whatever it's asking about, if it wants to
            if (os) {
                # remove stuff that vanishes
                each kv osc&shade {
                    delete n.sc[k];
                }
            }
            if (shade) {
                # add stuff that vanishes
                nc&shade = ex({},os && osc&shade || {});
                each kv shade {
                    nc&shade[k] = 1;
                    n.sc[k] = v;
                }
            }
        };
  
   // bracko
        # ry&sa = accessor of wai now|before
        # query wai, context for
        # < sorting by desire, OR if not AND,
        #    so to solver from the parts we may have
        me.bracko = &acgtjzco{
            
            !z and return
            !isC(z) and throw "braq!z"
            !(c||o) and return (zs&z||[]).slice()
            isst(c) and c = G&peel,c
            $M = [];
            # AND
            $amongst;
            $X = zs&X;
            each tv c {
                # might have indexing, only for the first one
                if (X && !amongst) {
                    $x = ahsk(X,'k',t);
                    if (x && v != 1) {
                        $vi = x.refs.indexOf(v);
                        vi < 0 and return
                        x = x.ref[vi];
                    }
                    !x and return
                    each in x.z {
                        nc&drop and continue
                        # < brack occasionally not readonly, see &nottoomuch_Eref
                        # check it's still in the data
                        $non = !(n.sc[t] && (v == 1 || v == n.sc[t]))
                        non and continue
                        !M.includes(n) and M.push(n)
                    }
                }
                else {
                    $from = amongst || zs&z;
                    each in from {
                        $non = !(n.sc[t] && (v == 1 || v == n.sc[t]));
                        non && amongst and M = M.filter(out=>out!=n)
                        non || amongst and continue
                        nc&drop and continue
                        !M.includes(n) and M.push(n)
                    }
                }
                amongst = M;
            }
            # one column mode
            if (o != null) {
                o == 0 and $onerow = o = 1
                o == 1 and o = haks(c)[0]
                $N = M;
                M = [];
                each in N {
                    $v = n.sc[o];
                    v == null and continue
                    M.push(v);
                }
                # not via &jaa, would || []
                onerow and return M[0]
            }
            M.length and return M
        };
 
  // &ha|&ja etc
       # < dont depend on %wou having &sahazaja
       #    they save us knowing about %wou(_accepted) being now|before
       #   it's Abrack
       // i &ha, o &ja|za|sa
        # sub variation: always array
        me.saa = &{ return me.sa(...arguments) || [] }
        me.zaa = &{ return me.za(...arguments) || [] }
        me.jaa = &{ return me.ja(...arguments) || [] }
        me.daa = &{ return me.da(...arguments) || [] }
        
        # i - enterer
        # < to react in a Ring,r hang way,
        #   returning/jumping somewhere to think/reapproach
        me.ha = &acgtj{
            return me&bracki,j,js&wou,...[...arguments].slice(5)
        }
        # o - reading,
        # from what is beginning,
        #  what was mid-way,
        #  what got to the end
        #   < without &bready? or just !sleep?
        # ja always now
        me.ja = &acgtj{
            return me&bracko,j,js&wou,...[...arguments].slice(5)
        }
        # sa last time
        me.sa = &acgtj{
            $z = js&wou;
            return me&bracko,j,zy&get_saz(j),...[...arguments].slice(5)
        }
        # za always >7
        #  so can take j=s, using sy&R to find last good R
        me.za = &acgtj{
            $r = jy&R
            $s = rc&s
            s && sy&R and j = sy&R
            $z = js&wou;
            return me&bracko,j,zy&get_zaz(j),...[...arguments].slice(5)
        }
        # differential
        me.da = &acgtjqc{
            c ||= {}
            isnu(c) and c = {el:c}
            c.el ||= 1
            $is = me&jaa,j,q
            $was = me&zaa,j,q
            # some rows, were none
            c.el == 1 and hak(is) && !hak(was) and return is
            else {
                # < changed number of
                # < hakd(), out of order
                # < returning new|gone|diff
            }
        }

       # < not node-obsessed
       // &sahazaja gives node %wou(_accepted)
        # io %wou, a feedback loop
        #   experience -> notion, notion -> etc
        #    < could drop percolate to descendants before they happen?
        #      kind of the counterpoint to &supetime 
        #        which redoes every step (or so) leading up to notion -> etc
        #       if all notion was piled up in the same placetime
        #        you would have less structure imposed beyond zaa|jaa...
        me.sahazaja = &acgtj{
            jy&R and j = jy&R
            # < de-hard-code $k
            $k = 'wou';
            
            # %wou = $z/$row+, via me&ha,j,data etc
            $z = j.sc[k] ||= Cye([k,1,{}]);
            zy&R ||= j;
            zy&brack = z
            
            # sa last time
            $saz = me&ollbs,j,k
            zy&get_saz = &j{ return saz };
            
            # za always >7
            $zak = k+'_accepted';
            me&rollbs,j,zak;
            me&reaw,j,zak;
            zy&get_zaz = &j{ return j.sc[zak] };
        }
        # simpler
        me.haja = &acgtR{
            $j = R || me&R
            # < de-hard-code $k
            $k = 'wou';
            
            # %wou = $z/$row+, via me&ha,j,data etc
            $z = j.sc[k] ||= Cye([k,1,{}]);
            zy&R ||= j;
        }
        
        # commit %wou to be za next time
        # usu via &Domes_7_upward
        me.node_accept = &acgtRrs{
            rs&wou_accepted = rs&wou
        }
       # for sub-node context, see &hajadome
       
  
 // < redo
  
  // brackology takes a look
    # situating crammed meanings
    #  wildest edge of things, where wheres where
    # < fill with hooks, combine with KnowC?
    #   see CB, which also wants:
    # < brackology with styles
    # < may have already been, shade difference?
    
    # find openness asap, ology upwards
    me.brackope = &acgtjkc{
        $C = js&C
        $z = jc&s
        $bk = 'brack'+k+'ology'
        $ok = bk+"_ope"
        $tog = &gq{
            # q.name qualifies up g to R
            $n = q.n = me&mtsc,g,q.may,q.s,'y'
            $issetor = &z,is{
                z.y [ok] == null && is != null and z.y [ok] = is
                return z.y [ok]
            }
            # 0..2 adjustable
            me.nto(j,q.n,&sTe{
                $add = e.t.startsWith('C') ? -1 : 1
                # may start from an ope we inherit
                $is = issetor(z,ope) || 0
                is += add
                is > 2 and is = 2
                is < -1 and is = -1
                z.y [ok] = is
            })
            # inherit last defined ok
            $ope = 1
            zy&R && me.cbu(zy&R,&r{
                $z = rc&s
                if (z && rs&ball) {
                    $te = rs&Te
                    # may remember over null
                    te and issetor(z,te.sc[ok])
                    $is = z.y [ok]
                    if (is != null) {
                        te.sc[ok] = is
                        ope = is; return 1
                    }
                }
                rs&Peace == 4 and return 1
            })
            ns&fs = 9+(ope*2)
            ns&ope = ope
            return n
            # to &vlabinto, &opelabel
        }
        $g = j.sc[bk] ||= me&opeology,k,{label:{walls:'bg',tog}};
        gs&opek = ok
        !c and return
        
        c.sc and ex(g.sc,c.sc)
        gs&ope and gs&pow = gs&ope
        gs&pow ||= 0
        
        gs&ws = 0;
        if (gs&pow > 1) {
            #gs&float = 'right';
            #gs&dis = 2;
        }
        me&walls,g,'b:2.2h6';
        
        return g;
    };
    
    me.brackology = &acgtjzc{
        $C = js&C
        c ||= {}
        $config = c
        isst(z) and z = j.sc[z]
        !isC(z) and throw "!z"
        $k = c.t || z.t;
        $g = me&brackope,j,k,config||{}
        !z and return g;
        
        $X = zs&X ||= me&brackX,zs&z;
        
        !hak(X.k) and return g
        
        gy&brack = z;
        zy&brackology = g;
        gy&X = X;
        
        if (gs&ope) {
            #me&nu,'waigh',z;
            #me&nu,"X",X;
        }
        
        # 0 - t-only, grouped
        # 1 - with amounts
        # 2 - t:v, for 1 v only (as now)
        # < t-only, of at the toplevel
        if (gs&pow < 0) {
            # < only changes pop up, shrink in
            $op = me&sizo,g,{t:'rows',len:zs&z.length,opelen:1};
            me&sizo,g,{len:hak(X.k)};
            !(op && ops&ope) and return g
        }
        
        $N = me&brackgroupX,j,z;
        
        each ic N {
            $ug = g;
            if (!cs&X) {
                cs&X = me&brackX,cs&z;
                ug = me&opeKn,g,c.t+'-'+i,{walls:'bd:1.4'}
                ugs&bgh = 581;
                ugs&dis = 2;
            }
            ugc&rows = cs&z;
            ugs&pow = gs&pow;
            ugs&ope = gs&ope;
            #j.t == 'Travel' and me&nu,"rowish"+i,c
            me&brackXology,ug,cs&X,config;
        }
        # < X.ref for inter-group object link
        # < ny&act from a &acting%ope glow
        return g;
    };
    # regroup similar rows
    # allowing a and a+b to fit together,
    #  sizo per column|value communicates the oddness
    # < show clearer when Km%ope (tabular?)
    me.brackgroupX = &acgtjz{
        $N = [];
        each in zs&z {
            nc&drop and continue
            $ks = haks(n.sc);
            $matchness = 0;
            $match = null;
            each ic N {
                $no = haks(c.c).filter(k => !hak(n.sc,k)).length;
                no > 1 and continue
                ns&dome != cc&dome and continue
                $yes = ks.filter(k => hak(c.c,k)).length;
                $matched = yes - no;
                matched <= matchness and continue
                match = c;
                matchness = matched;
                #j.t == 'Travel' and me&nu,"matched"+i,[ks.join(','),matched+'('+yes+'/'+no+')'+matchness,c.t]
            }
            if (match && matchness >= ks.length-1) {
                # groups members with <= 1 odd key
                $c = match;
                ac(c,'z',n);
            }
            else {
                $c = Cye([ks.join(','),1]);
                c.c = ex({},n.sc)
                cs&z = [n];
                N.push(c)
            }
        }
        #N.length == 1 and N = [z]
        return N
    };
  
  // brackXology - draw openable!
    # draw openable X.k/ref/z
    me.brackXology = &acgtgXc{
        c ||= {}
        $Kms = [];
        each kx X.k {
            $Km = me&opeKm,g,k;
            Kmc&k = k;
            Kmc&x = x;
            #
            Kms&pow = 1
            $con = c.kc && c.kc[k]
            con and ex(Km.sc,con)
            gs&ope && Kms&ope == null and Kms&ope = 1
            Kms&ope and Kms&pow = gs&pow = 2
            gs&pow ||= 0
            Kms.push(Km)
        }
        
        gs&pow < 2 and gs&ma = 0.2
        each i,Km Kms {
            $k = Kmc&k;
            $x = Kmc&x;
            if (Kms&pow < 1) {
                Kms&ma = 0.1
                continue
            }
            
            # total values for key, Km%ope if 1
            me&opesizup,Km,{len:hak(x.ref)};
            !Kms&ope and continue
            
            fio(Km,['ope',1,{s:":"},'hs:888']);
            $vii = 0;
            each vi,fx x.ref {
                $v = x.refs[vi];
                $lc = me&labeline,v
                $Kn = me&opeKn,Km,lc.t,{label:{tsc:'y'}};
                Kny&v = v
                ac(Kn,'vis',vi)
                
                $lab = Kny&label;
                $bsize = Knc&size || Knc&sortcv && 1 || 0
                Knc&sortcv = 1;
                lc.C &&
                    fio(Kn,['sym'+vi,112,{s:lc.sym},
                    'label,fs:13,lh:0.8,hs:757']);

                # total rows for this value with this key
                # < light up other k/v/rows this k/v/row has
                Knc&size = 0
                me&sizo,Kn,{len:fx.z.length};
                # many same lc.t pile up many sym, add sizo
                # < fix in -ology
                Knc&size ||= 1
                Knc&size *= 1
                bsize and Knc&size = (Knc&size||1)*1 + bsize*1
                Knc&size == 1 and delete Knc&size
                Knc&size > 2000 and debugger
                Kns&ma = 0.2;
                if (Kns&ope) {
                    each in fx.z {
                        $val = n.sc[k];
                        $na = [g.t,k,vi,i].join("'");
                        $wa = me&opeKn,Kn,na;
                        way&cv = 0.2;
                        was&dis = 1;
                        # sprout icon, some non-nu to click
                        $wan = me&opeKn,wa,'ܤ',{label:{tsc:'y'}};
                        if (wans&ope) {
                            # whole row
                            me&mnu,wa,'row',n
                        }
                        else {
                            # for the value
                            me&mnu,wa,k,val;
                        }
                        wany&cv = 0.8;
                    }
                }
            }
        }
        return g
    };
    # a title for $s, data if weird
    # < -vat compat, fliop
    me.labeline = &acgts{
        $c = {}
        if (isC(s)) {
            c.C = 1
            c.sym = isR(s) ? 'R' : 'C'
        }
        c.t = c.C ? s.t :
            s == null ? '*null' :
            isst(s) ? s :
            isob(s) ? ki(s,2) : ""+s;
        return c
    }
    