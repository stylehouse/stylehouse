
2023
mo Feb 20
  burning horse afterglow
mo Feb 27
  decide to write a good for a while
  get letz up to 45e6ecb2d71d6a
   Le is a js object! my first in ages
  so that was going explodingly...
   in text, everything getting Aip, channel reorganisation bursts
    as a ws+lv Linesing Aip,s,c,sc
     so letz should parse its own text-sync protocol
   projectible clouds of ling particles?
 tu
  yes, looks good that I stopped
   `gitk 64ff01c1d9947...4cd6a3e59f14d`
   seeing among unpushed commits noise like: c73267528
   &wind_A 5efe244 and 24e6f21aa
    the core of the iterator.
    needs to lock sections for progress of others.
     ie each one needs to be async and go async for other itselves.
      that is the way to avoid having queues, esp such that work repeats.
      so the limiting time factor is to allow others to cognise what just happened.
       in so far as they have hooked into knowing what happens around them.
   then Inside / running / podman begin 35d3a9e6
   and end about 4962811a lezer teeters
    a couple of days of letz, then gap.
   nearly a month later I commit news of hard drive crash! 5875493c253
    which I basically recovered from to dev letz a little more..?
    and lots of holiday not-ing
     which would be a great onramp to mi micro teia de registro
      time each line, batch by chronohomie
 we
  cabinny, go to Yours,
 th
  my office.
   resolves to make gondolas pulling film out of piles
   to attach labels, put in places, frame
   via letz parsing io for thems...
   the S prompt is a place!
    the screed is the playwriting of the action
    it should be a bunch of Somethings
     way is stacked up like a micro teia de registro
  https://www.youtube.com/watch?v=Rla2CH-1aqI (Eno - Thursday Afternoon)
  A watcher is needed... (as above)
   and as chatGPT advises
    "you will need to figure out how to use the infinitely long IP address to recursively traverse the system"
    It seems that "c" is used to define the base identity or characteristics of objects in the program, and it is not clear from the description how these properties are derived or defined.
    It seems that "A" objects can contain multiple "C" objects, and that properties can be tallied across them, usually grouping like "C" things. This allows for the expression of many "C" objects on the screen as a stack of individuals bulging around and/or into the items of identity that can be nested in space. This may involve solving a small 2D tiling problem to express efficiently the composition of a bunch of information.
 fr
  chatGPT
    hierarchy can facilitate communication and decision-making by establishing clear lines of authority and responsibility. By creating a clear chain of command, individuals can understand their role within the organization and work together more effectively towards shared goals.
  
mo Mar 6
  one year ago I was in to &Ploy
   which (felt like a large) space of qua shuffling
    was missing io to make all the linkages breakdownable
   I still dont have a notey link space
    for to get to the T rooms I forget
    ie how to play with &Ploy
     iirc its a viewer for changed test results
     it ends up looking at very samey stuff
     we constantly need to compress the output
     as soon as we have some pattern over the chaos
     the frequency wants to rise again, thussing and thussing
   I was making time-socket S|Go
    showing what haps with -AXV
  talk to chatgpt https://howsecologysquad.blogspot.com/2023/03/cgpt-roundup.html
   in conclusion I would say:
       voicing() seems to be my goal
       some apparatus of multitudinous movementisms for the mind <-> world (the world of A+C).
       perhaps it needs to be molecular, a few A walk each other seeing what to do to the other.
       to split the 'thinking of you'
   as in, this was a waste of a week. oopsies.
mo Mar 13
  so want to go to Karamea this weekend.
  I come along sometimes and the computer is going oom
   transmission 3.00 has 15.7% of it
   `free -h` says available 233Mi, which is low.
 tu
  I read node_modules/@codemirror/commands/dist/index.d.ts
   interface MarkDecorationSpec {
    are for wrapping text in multiple <somethings>
   interface WidgetDecorationSpec {
    for putting <somethings> in text
   interface ReplaceDecorationSpec {
    for drawing closed chunks...
    we will need to transmit ghostlets with closed chunks in.
     perhaps metadata describes where and how many lines are missing
     the included lines should address the opening
     this would look just like spec expanding an inner branch from some topic
      just like this line here, which neednt be except to say this more clearly
   declare abstract class WidgetType {
    all good.
   https://codemirror.net/docs/ref/#state.EditorState.update
    (...specs) Create a transaction that updates this state.
    https://codemirror.net/docs/ref/#state.EditorState.phrase
     shortcuts with params
   https://svelte.dev/docs#run-time-svelte-setcontext
    ~~ ark, localising Names, &t lookaround.
     is &t for u or n?
    Context [not] reactive [...] you can pass a store into context, which will be reactive.
    seems like large items (G) could sit in the codemirror where they are configured
   https://learn.svelte.dev/tutorial/page-data
    Every page of your app can declare a load function
      in a +page.server.js:
        export function load() {
            return {
                summaries: posts.map(... { slug..., title...})
      
      the +page.svelte can access this via the data prop:
        <script>
            export let data;
        </script>
        <ul>
            {#each data.summaries as { slug, title }}
      
      then the one src/routes/blog/[slug]/+page.server.js:
        import { error } from '@sveltejs/kit';
        export function load({ params }) {
            post = findpost(params.slug)
            if (!post) throw error(404);
            return { post }
      
      and the one src/routes/blog/[slug]/+page.svelte:
        <script>
            export let data;
        </script>

        <h1>blog post</h1>
        <h1>{data.post.title}</h1>
        <div>{@html data.post.content}</div>
    
    Every one of these Svelte docs pages has a worker, it looks like. 400Mb
  I write https://howsecologysquad.blogspot.com/2023/03/bc.html in the evening
 we
  GPT4 release
   32k tokens now, will surely help my rabbit-warren light up
   a non-event: not clear how I can use it today
  chatgtp attitude
   have languished in dialing chatgtp
    need automation
  more https://learn.svelte.dev/tutorial/the-form-element
   great simplicity
   you (as letz/src/routes/sverdle/+page.server.ts):
       export const actions: Actions = {
           update: async ({ request, cookies }) => {
   or s/update/default/ and drop action from <form method="POST" action="?/update">
   even: 
   does great paving over the jagged whoirley of http+html this used to be
   so the form empties when submit...
    to keep values in, have them come back from the server in:
     <input ... value={form?.description ?? ''}>
      supposedly this works with javascript off?
     and render
  I go to The Dog, the dying open-mic-having cafebarvenue in the evening.
   it was a bit griefy and I part with a Rye from Yours, seeking beans over people.
 th
 sa
  Svelte slots seem good.
   can I read the objects out of them after html layout but before render
    and rearrange things until I like it?
 su
  remembering yesterday,
   the voice looks back in time until it recognises something, calls that parent
mo Mar 20
  Svelting up
   @letz b6b812dcee more animation (using)
   https://youtu.be/3TVy6GdtNuQ?t=2054
    passing events around takes lots of labels
     surely theres automation for this slinking of fairylights
 tu
  https://dagshub.com/ is looking good
   see src/WebGL-Fluid-Simulation bb4b6d8009fccd
mo Mar 27
  buth day!
 tu
  @letz:
mo Apr 3
 th
   o_up()
 we Apr 12
    cont.
 fr
mo Apr 17
  @letz / St.ts
   make class A|C to facilitate their id-ing
    it seems to be free with an object
 tu
  @letz / Con data dumper
 we
  being ready to Conbustank
 th
  a little Conbustank
  @letz / Con
   ping the innards! my datadump is not re-rendering
 su
mo Apr 24
   {#key} at the top level (redo everything) is all that works!?
 tu
   we will have to do lots more of Con in St...
 we
    exporting a C** just for Con
 th
     unifying C** interface
 fr
   solved dispatch problem
    wrote up blog on this week
     https://howsecologysquad.blogspot.com/2023/04/svelte.html
mo May 1
  Conbustank fra-
 tu
  Conbustank -ming
 we
  @letz / Con
   still not working
 th
    the Cont%Ct is stale, its y&up.c.s.t is not...
    figure out a bunch more of my faults:
     we need to send the new -Con
      with a .c.version
       < that is real
     reactive the o -Con/*
 su
  thoroughly repaired yesterday
  @letz / test.ts
   towards `npm run test`
    deps: npx playwright install; npx playwright install-deps
     < test build having that done
 mo
   test passing
    real	0m37.355s real slow. how to hold the loop?
 tu
  @letz 036941112b / St<->Con
   class sip_dispatch
    has fixed "stop wires from being recycled"
     no idea why. perhaps toplevel is recreating?
    critical to updates is: Code.svelte: {#key conver}
     after a second bleep() no updates received
     perhaps the old con is still used..?
    so is Con.svelte: {#key quee}
     which basically dispatches to Con/Cont etc for us
 we
  @letz / St<->Con
   should check we can dispatch updates to sip=1
    and lo, problems with 1.2.5 (the new dat.i) not having a wire
     ie the throw unwired in Con.svelte
     the wire has been made but unfound by getContext
     creating a new Con//Con can cause old Context reuse apparently..
     allowing this to happen now reveals:
      always unwired after refresh (and bleep, bloop)
       further bloops keep it unwired
      another bleep, bloop+ always works
    kind of stabilise updates to sip=1 @letz 5e54e1dbdbb7
     ensure refresh=0 during bleep()
      we were able to ignore the 1.2.5 spawn
       during loops of (bleep,bloop)+
       since 'refresh' would stay at 1
   thinking about diffing...
    be nice to see Con output in Con
     wondering what properties they have...
      just each other, their t,cv,sc
    d.visit needs to include (and will only use) -Con[tz]
    d.D is the d.C from before
     last output fed in again at the top
    d.D must 'resolve $n' in time to find -Conz its D.c.next_boost
    C.c.X as the absorber of everything else on C.c|sc.*
     going into those things as far as it can, eg sip
      avoiding other C?
      > looking for time-space deals in there. is it "the same"?
     Con sees little
     Cont has the label, typology
     Conz has a some children
      and must template any rearrangement?
     X.c|sc=$gk
      .is=v if nonref
      .sym=such,k=$k
       could then turn into an {is} or {sym,k} if more hash...
       .sym=such,k=$k2
        .is='blub'
         eg is C.sc.flab.$k.$k2 = 'blub'
     ignoring C&Cont etc
     C&X <=> D&X
 th
  keep it simple now...
  bind:this might help make an index of components
   which we might simply call for an update on...
   instead of this wire stuff
 fr
  @letz 358b75b82f9b / Co.ts
   do DCresolve and DCdiffer
   wire all -Con** and remove their {#key}
 sa
   763d2f4b7 fixed: deleting mind (1.2.2) keeps its label,
      seems to misalign Cont<->Conz for several things
      probably need to check D<=>C ip somehow
    we just needed to put Con.svelte C.* reading in a $: upto(C)
   {#each} can have a key, items in a changing list remain themselves
    goners going, next item slides up
    looking at it do transitions we are mutating the goner
mo May 15
 we
  screen record some demos illustrating last week
  @letz
   11c6bb1c272 remove goners and rename it sip_dispatch.setN
     fixed: old sip is updating as it fades out
      its size|content becomes that other
      and doesnt get removed after transition (usually)
     interestingly, noticed this only becuase:
      78b26a563ec cause lots of el:4 spam to every ~C.c.ip
       which is obsolete, since 86f3f76209d5
        C.c.ip can be kept in sync without dispatch if put in upto()
        svelte seems to be running all these upto() functions every time
        luckily they are just assigning a few strings...
        < get definite svelte<->data awareness awareness
      subscription dupe from the C now assigned its ip
     would otherwise be more cornery
      < fuzz testing
   perf
    toCon() 1.6ms
    setN() 2.2ms
     it is all console.log
    layout etc 60ms
     then without transition 10ms
    conver++ (keyed, recreates everything) 80ms scripting, same-ish layout
   dramatic revelation: sip dispatch not required!
    every upto() is running (anbup)
    an intelligent minimum of work (mozwales)
    even if the C remains the same (no tocon())
     ie not '==', perhaps because object
      < should we make a tree of versions we can recurse efficiently?
   I hope https://joyofcode.xyz/svelte-state-management
    will answers? no. why doesnt it not work?
 th
  @letz c435d04b4a
   has no need for all this dispatch management
   hundreds of things can keep up to date speedily
    I suppose the alignment of values in upto() is key...
   perhaps all this dispatch will be useful somehow
   we certainly are near lv emission there...
   now we wander back to what to do...
   leaving the dispatch stuff around, disabled
    < use it to navigate a tree of versions
   
   throwing a Le (an AST fragment from CodeMirror) into the Con
   boost redo bunch of Con** via toCon_reentry()
    that is some A business how it replaces subnets
   w,e,r are the keys
   bleep() on startup (Mount)
 fr
  see Inside / and so... / mediaserver detour
 sa
  as above
 su
  as above,
   letz/py
     this works quite well after only a day
      makes ~5kb webp thumbnails, takes <1s for videos
  letz split Diring from Code
   wrong:
    in Code.svelte:
     import { Diring } from "$lib/Diring.svelte"
    vite will say:
     Error: <Diring> is not a valid SSR component. ...
   right:
    import Diring from "$lib/Diring.svelte"
   also if:
    {#each peek as f, i}
    at the end of Diring causes the same "not a valid SSR component"
     along with an earlier: /src/lib/Diring.svelte:69:7 'peek' is not defined
   you have to be careful
    to not click away the modal error message in the webapp,
    whence it will have failed to reload
  detour for exploring video thumbnails
   backend work in py/serve.py
   letz py thumber
   2 in parallel, when timestamp > video, snap at 1s
   opencv used simply to take 9 samples
    < finding representative thumbs
 mo
  detour for exploring video thumbnails
 tu
  @letz / Co.ts / inlace Con frontend work
   prototype inlace refactored for tail calls
    surprise: no tail call optimisation in javascript
     so bloop() now runs in 65ms, not 2.5ms
     it gets 172 calls deep for our 20 d
    nice picture of the resolving stagger of Atime
     ie A1@3 with A11@1
    default d.tailcalls=0
     bloop() now runs in 1.5-2.5ms
    < how to depth-first (or not)
       will generalise to io expr demanding perspective
        with even @2/@3 possible (child runs ahead)
    
   another inlace frontend for -Diring//-Dir
    api wrangler
 we
  Conbustank painty
  @letz / Dir
    climb the s* to find all -Dir above us we are relative to
      to formlink to the whole thing
 th
  Conbustank mounty
 fr
  Conbustank joiny
 mo
  @letz Compile.ts stylehouse_lite(source)
   we seem to already have npm:magic-string
    https://inspirnathan.com/posts/27-how-to-use-the-magic-string-library/
   Babz translated:
    '#' comments
   as a vite thing
  @letz
   Dir/Img
    how do we know its an Img?
     we seem to already have npm:mime to suppose .jpg$
 tu
  Conbustank paint
 we
  Conbustank paint
 th
  just lounge
 fr
  food mission
 sa
  Waitati hillside
  @letz Compile.ts <-> vite?
 su
   this seems to be it:
    https://github.com/sveltejs/svelte-preprocess/blob/main/docs/preprocessing.md#custom-preprocessors
   but the svelte() there is sveltekit() here (rollup ~~ vite?)
   it seems to be for svelte.config.js, which has a preprocess
   and now we seem to be outputting js
     by the way its erroring about typescript syntax
     how to have it both ways? lang="ts+stlli"?
    its not so obvious that it would become javascript...
mo June 5
   as vite plugin with caveats
  vm networking nightmarelet
   Im teetering along figuring out the compile-to-javascript
   when I lose the ability to connect to http://192.168.122.92:3000/?ierorag=9
    I check chmod u+s /usr/lib/qemu/qemu-bridge-helper
    I rebuild cos as user-mode podman, as the py/ is
     in src/letz/ is some root-owned stuff to delete:
      .svelte-kit
       "You can ignore its contents, and delete them at any time (they will be regenerated when you next dev or build )."
      also node_modules/ (it lsyncs back again, owned by s)
    I also drop node_modules and `npm i` them back
     then rsync these back to sa:src/letz/ so I can see into libraries in vscode
     this might have helped...
   it seems I must use http://[::ffff:c0a8:7a5c]:8000/ now (related?)
    it can take a while to realise your frontend (browser at page) is not connected
     once you are used to it updating without you hitting F5
 tu
   as svelte preprocess, esbuild
   with sourcemaps
 we
   errands all day
   kind of conclude
    https://howsecologysquad.blogspot.com/2023/05/svelte-further-than-ever-before.html
    we have .ts and .svelte <script> doing our lang!
 th
  @letz Compile.js
   refactor stylehouse_lite for the need to commit the magic string
   Babz translated:
    EXPR and BLOCK
    each
    &args{...}
    $lexicals
    shorthands to access A* and C*
  found an old line of code about an old 32bit OS I got stranded on for a while:
   #     chrome < 2012 restacks when rethrowing
 fr
  at some point this morning,
   possibly due to deleting a bunch of torrents?
   I have lost the ability to resolve names
    dig google.com @1.1.1.1 # works
    dig google.com @127.0.0.53 # doesnt
   torrents and ipfs still work!
  mad chilly out there
  regroup Code.svelte
   < figure out if inner components can send slots to parent
     so a bunch of experiments can merge their interfacing handlers...
  so far Svelte seems to be simplifying this nicely
 sa
  regroup Code.svelte
   have snipped:
    Le++ -> dat.look -> Con
     this was going to get cm things together nice
  see Le.ts / 'it seems:'
mo June 12
  Conbustank
 tu
  Conbustank
 we
  Conbustank
 th
  Conbustank
 fr
  Conbustank
 su
  notice on the web:
   text-indent: 2em;
   makes the subsequent lines less indent
    this could also be -2em for lang:spec-like wrapping
    
mo June 19
 mo
  Conbustank
 tu
  Conbustank
 we
  Conbustank finito
 th
  .
 fr
  . 
mo June 26
  Conbustank dumprun 50kg, mostly motoroil
  I have rebooted and done some apt upgrades, so:
    starting gox error: "Transport endpoint not connected"
     virbr0 says NO-CARRIER also
     as documented over here:
        and to the error when starting bridge-networked podiae:
         well simply: chmod u+s /usr/lib/qemu/qemu-bridge-helper
    looking at Inside / running / putting code into dev
     what became @stylehouse/zap:
     automate running and monitoring all these commands
       https://chat.openai.com/share/3ba6a4c6-ed44-42fd-92ad-cfba44c3f5aa
       <snip>
        also, trying to get the production artifact for this svelte project...
         which I assume is some kind of WSGI+node thing
        
       # npm build:
       ssh gox
        cd src/letz
        podman run -v .:/app:exec -p 8001:8000 --rm -it --name cos2 cos
        npm run build
        # try again, got Killed
        
       # bun build:
       ssh gox
        cd src/letz
        podman run -v .:/app:exec -p 8002:8000 --rm -it --name cos3 cos bash
        apt-get install curl unzip -y
        curl -fsSL https://bun.sh/install | bash
        su
        bun run build
        # ...aaages! not sure, everything slow...
          qemu-system-x86 keeps ~18% cpu busy while bg
          takes forever to ssh in there,
           this `apt install top` is minutes later only Reading package lists... 7%
        # then: Error: Cannot access url.searchParams on a page with prerendering enabled
          surely its not "SvelteKit will load your +page/layout(.server).js files (and all files they import) for analysis during the build. Any code that should not be executed at this stage must check that building from $app/environment is false"
          bun not having the url object?
          abandoned - seems to have .svelte-kit/output/ something, 1.5mb
        
       # bun adapter?
       the above s/cos3/cos4/
        bun add -d svelte-adapter-bun
        # ...ages... ~100% cpu on qemu-system-x86
          in virt-manager I increase its 'Current allocation' to 2000MiB
           and the beast roars off!
          and then 
          how lovely:
           warn: Slow filesystem detected. If /root/.bun/install/cache is a network drive, consider setting $BUN_INSTALL_CACHE_DIR to a local folder.
           
       # bun run:
       ssh gox
        cd src/letz
        podman run -v .:/app:exec -p 8002:8000 --rm -it --name cos3 cos
        apt-get install curl unzip -y
        curl -fsSL https://bun.sh/install | bash
        su
        bun run dev -- --port 8000 --host 0.0.0.0
        # is then at http://192.168.122.92:8002/
          perfectly. 20% faster startup.
          abandoned - redundant
        
       virsh dommemstat gox
        # < watch, conver numbers
        
    looking
  "monday! production!" Nat
  hands: coal and sheep shit. healing well.
  remember prior battle was adding custom syntax language to svelte
  smooth out jumping to top of page on Dir nav
    https://chat.openai.com/share/f286117d-3002-4179-95ab-8c2677f71d28
     I want an nginx thing... (for no reason)
     https://kit.svelte.dev/docs/adapters
     my writes contemporaries: https://www.alibabacloud.com/knowledge/alicloudtop/how-to-write-a-vite-plugin
     more junk https://support.huawei.com/enterprise/en/doc/EDOC1100126913/8e189fc2/display-isis-interface
     great piles https://nzdotstat.stats.govt.nz/wbos/Index.aspx?_ga=2.171151977.815579889.1684741691-1773240556.1684741691#
    its because nav was <a on:click>, so they button
     gpt3.5 prompted with "when on:click" not "when rendering" knew
    
 tu
  our interactivity happens at two layers:
   Con
    genericity
    %boost is adjusted to inlace further
    -Con / boosting() shall reCon() after ~%boost
     helps make Diring / theD snappy
      exploring the D** generated by:
   Dir
    eccentricity
    state machine wanting reflection
    -Dir / nestDir() shall reCon() after C++
     directory openness adder
  caveats:
   Dir++
    after a point we need more boost
     to dive deeper in C**
     see inlace further
   Con++
    inside a D** is faster than "from the top"
     however: we dont reiterate the source data "from the top",
      so often opening Dir** and then looking at the D** generated
       requires "from the top" to refresh t the most unfolded D**
     < rebase, knowing somehow
  hmm
   seems like a good Aism
   getting sheets of data out to be slowly wandered through in a recoverable way
    is the essense of the mind...
   multiple manifolds and their zappy entanglies
   and the lack of boost to open the door...
    perhaps it should automatically attract attention to ineffective acts
     ie we notice no more output with some new input
      and opt for the nearest %boost
      things would have reasons not to etc,
       piled up like in The / Eing
  fix Compile: '... and ...' happening to '# comments'
  and look around The:
   The / TheingE 291
    R <-> E
    Ey&ers <-> s
     ~~ Con s <-> D **
   The is pretty well-commented
    translating it all into the Con-junction could be linear
    &Piing ~~ pit()
   &Piing_inst
    an interesting lifecycling and schematising
    using io to build a flow of information (see <- %%inst)
     @Gnome/(@Thy...@Lab) is made with one:
      i @Thy/-This/#@Fine-Labine/@-Lab#@n%ThyLab/c&s=@n
      see TheThy+Piing 292
     @Run...
      i @Run/@-This/-Eight/-seven/**%Ethinging:six
      see PiiRun+Piing 293
     @Run...six... sometimes are Log/row/vat 21
      those use Epigraph to make their inner
     @Run/This
      @Run/The is in control of
       and things occurring in This can find The instructing them
       via:
        &Fishlive_matching
        between &Piing and &Pieri
 we
  more look around The as above
 th
  letz/zap.py
   thing to "automate running and monitoring all these commands"
   put stdout etc into cmd object
   make ncurses interface to system/job
    > try to build a terminal there?
mo July 3
  letz/zap.py
   contemporary this:
    https://juju.is/docs/sdk/actions perhaps
     just has you writing naff subprocess.run code
      after it looks up play|pause|snapshot for you
   parallelism achieved
   < further testing, interface colours, notifies
  laptop fan is dying
   will try to lash a 120mm fan onto it...
   laptop cuts out while nobody is touching it and refuses to boot now (AC light on)
    about the time I moved the power button appendage PCB
    perhaps because the cpu fan is disconnected (wasnt getting hot)
   on to the Conputer I recently was gifted!
    I lash the heatsink down, fan things, with fishing line
    can only sit horizontally until proper heatsink bracket got
    but it fits down the back of my desk quite well
    it had a button switch connected to +12v
     that puffed out smoke when I pushed the button
     switch had a case fan plug on it
      must have been intended to close a control circuit
       it had a sun icon on it, for lighting?
      got adaptored to molex plug: +12v, probably over 20A
    soundcard
     audiophile 2496
      not good.
       mplayer seems unable to piss: Audio device got stuck!
       lots of this in syslog for a while:
        snd_ice1712 0000:06:01.0: invalid position: , pos = 107374181, buffer size = 6553, period size = 3276
    I also:
     sudo apt install xserver-xorg-video-nvidia-535
    and reboot
  letz/zap.py
   progress
 fr
 sa
  zap runs the game
   output streams
   some colour codes work
 mo
   some colour codes blow up:
     letz/py/culour.py:42:
       fg = TERMINAL_COLOR_TO_CURSES[color]
      KeyError: '[31'
  letz e8451f5212bf
   I opt for shelling out to less -R +F $tmpfile
    which is hard to isolate SIGINT to (zap_run.pl)
 tu
  letz.git/py/zap* surgically git-filtrated to zap.git
   with py/git-part.py
  zap.git
   doing writeups and demo vid - hopefully the other mes find it
   fixing exit code capture - must use shell=True to get it
 we
   py/zap.py wired to py/git:zap/zap.py
    resolve __file__ symlink to find zap_run.pl
  mix
   has gone down via weebly being acquired by square
   < download the site from their site builder, or:
   < scrape internet archive for pages
  letz
   shuffle notes
  stylehouse
   split Text,Diff and a YYYY
 th
  massive C+Xlib go+xgb detour
 fr
  letz
   tidying the submoduling
 sa
  letz/
   Adju / me.wind_A
    is like ...
mo July 17
  somehow lost (cloning away) node_modules/ (is gitignored), leaves me trying `npm i` on the vm
   it doesnt like the vite script: import statements must occur in modules
   luckily I made a backup of src/letz. madness.
 tu
  Le.ts doc, reading code
 we
 su
  letz cm
   rename our lezer lang "stho"
    we need only .grammar since f67228b674 avoid pre-compiling grammar->js
 mo
  see Le.ts / 'it seems:'
  note const I_mind.In|Con - what Construct uses as mind
   Con is default s=data climbing mode
    it may become 
   In takes s=C, whose /* (z) 
 tu
  ipfs.py is tricky to get finished
   it seems to lack the Length header...
   rewriting in flask
    ok:
      wget --method=PUT --body-data="Drain it is the last word of the last commands, something like:being interpolated by the shell is the last word perhaps with machine learning their expected flange cake" -S s:8000/
      wget s:8000/5835ea2230e6b4ee2b6c3645038ccaa54c110c01f0a2bfa4cefabf32ffe008bd
      cat 5835ea2230e6b4ee2b6c3645038ccaa54c110c01f0a2bfa4cefabf32ffe008bd | sha256sum
       -> 5835ea2230e6b4ee2b6c3645038ccaa54c110c01f0a2bfa4cefabf32ffe008bd
    hooray!
 sa
  cm state -> Le_Attention() -> Coning
mo Aug -1
  zap 1.0.3 - figure out how to stream stdout|err
  Le C
  Le.ts etc broken sourcemap investigation
   in a few parts:
    vite says: Sourcemap for "/app/src/lib/Le.ts" points to missing source files
     same for {St,Sv}.ts and lang/stho.ts
     fix: changing 'null'->undef in the stho_vite() compiler: ts.map.sources = [undefined]
      making that = []
       causes vite to say: Cannot read properties of undefined (reading 'map')
        at this line deep in vite:
         # recurses into SourceMapTrees
         function originalPositionFor(source, line, ...) {
             ...
             return originalPositionFor(source.sources[segment[1]], segment[2], ...)
         }
         here it would seem source (.map|names|sources|sourcesContent)
         is being recursed into: source.sources=[source+]
         but from here it seems it is an int:
          decodedMappings() / decode(mappings)
         getting above
          all these unknown clusters of words
          would be great
      
    vite says: Not found: /src/lang/null
     which looks like what you get with `GET http://192.168.122.92:8000/src/lang/null`
     also for /src/lib/null
     in DevTools /
      Sources / Page src/{lib,lang}/null both exist, could not load contents
      Network
       there are no requests for src/{lib,lang}/null
        however:
       null is given as the Initiator of requests for:
        node_modules/.vite/deps/@codemirror_language.js?v=1b58732a
         inside the request, on the Initiator tab
          the "Request initiator chain" says
           it comes from src/lib/Le.ts, via Code.svelte
        src/lang/stho.grammar?import&raw
        node_modules/.vite/deps/@lezer_generator.js?v=1b58732a
         as above, inside Initiator is known to be:
          src/lang/stho.ts via Codemirror.svelte via Code.svelte etc
   
   noise basically.
    Code|Codemirror.svelte are sourcemapping to /app/src/routes
     their base64 decode is json, has .sourceContents=[null,$stho_compiled]
      and that errant filename twice in corresponding .source=[$f,$f]
    src/routes/Codemirror.svelte
  
  we
   avalanche of zap progress
   a blog on python   https://howsecologysquad.blogspot.com/2023/07/python.html
   also, quickly after formatting a flash drive,
   the computer shuts down.
    as if I did the wrong device! ha.
  th
   zap 1.1.0 - lacks banished
  fr
   to recap "Le.ts etc broken sourcemap investigation"
    I am debuggering into Le.ts Le_Attention()
    the line we appear to stop on is +2 from the debugger statement
    if I add a line above debugger of "3 and 4 and 5"
     which compiles to five lines - two nested if statements and a 5 in the middle
     we dont appear to stop on any line
      but we are still there, able to watch local vars change as expected stepping onwards
    and,
     if I dont ts.map.sources = [''], Le.ts cannot be found at all
      we end up on a "null" source, about /src/lib/null being missing
   so df13341e
    perhaps I should be generating a sourcemap differently
     using diff-match-patch? which we will need anyway
   but first, using CodeMirror to display such a thing
    but first, revision: https://codemirror.net/docs/guide/

mo Sep 18
  recovered from storage device failure
   zapped ssd somehow while wiring a DIY air filter on its sata power line
    crazy amounts of fan noise, with the old laptop (ba) on too...
     will try to get an office with the old laptop.
   but its okay because the last month and a bit was terrible
   < get ongoing backups going on
   < air gap one of these 4tb drives
   about 10tb (out of 15tb?) here is now encrypted
    < determine how best to do drive encryption
 th
  rename to stholite, remove from .svelte files
   because our sourcemap is so bad
   still does .ts files like Le.ts, seem to have no sourcemap.
 su
  remove gox from zap, ssh sa (itself) instead
   still the warning of "The input device is not a TTY." (debian 12?)
  bringing Lines into letz
   < using the Codap editor vastly better than vscode
     but `ln -s ...` not liked by vite (or vscode? it froze)
      even with vite config resolve.preserveSymlinks
 mo
  another few more Babz to Stholite Y/Te
   which can just be Y/Te.ts!
  I wonder,
   how to kill signal an npm process to restart it
   $ podman top cos1 # shows processes inside a container
   $ podman exec cos1 /usr/sbin/kill -HUP 1
    Error: crun: executable file `/usr/sbin/kill` not found in $PATH: No such file or directory: OCI runtime attempted to invoke a command that was not found
 tu
  trying to replicate the Y/Tex to letz...lib/Y/Tex.ts
   lsyncd has bad documentation https://lsyncd.github.io/lsyncd/manual/config/layer4/
    it never seems to explain the action->function(...) ... end thing
     trying this in py/stylehouseY.lsyncdconf (via zap)
        action = function(event)
            log("Normal", "Steve was")
        end,
      results in an infinite loop of "Steve was" when copying one thing
       luckily lsyncd can hear the Ctrl-C we give zap+less
        so it can break out and %restart easily
    but does refer to suffix, having no explanation except type=SUFFIX
     which exists as rsync --suffix too, is what we want
     doesnt work!
    letz.git 518fd82d504
     try creating a symlink at source Tex.ts -> Tex
      because the editor (stylehouse + %Codap etc)
       cannot write files with . chars, it turns to Tex-ts
     lsyncd doesnt notice the target of the symlink updating
    ask an AI how lsyncd works for better interface ideas
  so lets abandon the editor I like for a second,
   since we are trying to rebuild it anyway
   Im going to work on letz...lib/Y/Tex.ts directly
    syntax=coffeescript looks alright
 we
  bringing ex() etc...
  Planet|Ying|Codap only has Fividy and before
 th
  round-tripped some Lines!
   brushing off old artifacts and placing them in a new shelf
 fr
  Text
   export all
   hacks to &enj and &oleak
   &enL uses json for data

mo Oct 1
  wake up to recycling blowing down the street
  think of replacing -Con etc with A.svelte
  some good visions
 tu
  a lack of bright colours in vscode
  staring down the heavily sleeved Co.ts
 we
mo
  get &deL to make TheC
 tu
  need to layout some "other" data
  grow codemirror<->&Le_Attention introspection plant
 we
  cytoscape blitters into existence
   like a tiny lost protein on the floor,
    the graph was zoomed out and wandered
    I pry open its <div>
   # o_path() is the most ~~ io thus far
 th
  Le
   resume_selection_state is handy
 fr
   labeling the nodes
   dont graph sel
   look -> graph reactivity
   dedup Title
mo Oct 16
  fcose + alignment constraints
   left,right,
    sorting is unreliable even under loads of constraints
     ie a left+right linked list of nodes that also must be in alignment
 tu
  something? computer was off for a while
 we
  crack a vscode annoyance:
   "editor.suggest.selectionMode": "never"
   no more typing n. and getting N. when both exist, etc
  DropDown, can be hashes
  

mo Oct 23
  leaving Collaborate for ONeils camp by Pleasant Point
 tu
  to Lake Poaka
 we
  best day
 th
  worst day, dodge storm going home, sunny cow-panels all
 fr
  mess with cytoscapings, add more layouts
   switching layouts to cola
 sa
  cy.stop() layouting, helps avoid ui race on layout change:
   last layout may race-condition its way back after another is engaged
  see "causes a loop somewhere that freezes devtools"
 mo
  thinking about &Ring, and I:The
  prod graph, almost not what to do right now?
 tu
  Le whatsthis: .node.parent: up out of the grammar
   eg linkage of cu(.name=Sunpitness).node.parent(.name=Sunpit)
 we
  something?
 th
  posted this on Sunpit should match IOing
 fr
  Le.ts graph
  the text split by syntax nodes
mo Nov 6
  this whole week was working out this demon:
   https://howsecologysquad.blogspot.com/2023/11/codemirrorlezer-cytoscape-1.html
 fr
  redoing Le.ts whatsthis(), blogging
  I have to `systemctl --user restart pulseaudio.service`
   after any sound stream stops to start another
   and there seems to be a <3 day uptime limit, freezes
    perhaps because swap is encrypted it is 10x slower to do so?
    can I get more fast-ish volatile memory? this thing is old-ish...
   maybe xfce4 + X for a while longer
    or should I learn gdb and help wayland support...
  The computer is unevolved because peoples minds boil when they get close to it
 sa
  I should always set an alarm on Saturday
 mo
  get finished with 
 tu
 we
  css nice up
  mostly thinking we should bring in The
   A it, and async when waiting for Inc-exposed things
   become doing W as a widening of the selection state resumer
 fr
  needing W as state resumes higher
   a ui toolkit is kind of lurking
   needing branchy change negotiator to dial things in
   directory keeper
   the i $of=$D more streaky than i $of:D
    string context implying its going somewhere (a branch)
 sa
  I resolve to G.ts
   shall need a non-A to dump Time, Name, etc
 su
  move Kathleen
   her new place is too close to the highway and smells like some kind of urine
   vast stretches of the shells we live in go without revamping several ages
   Mark says please, something about the young not wanting to work
    which leads to imigration to keep everyone earning that sweet sweet 2%
    be quite okay to dilute the Britishness I think
    they seem to be mostly big project people in waiting
    tense fuckers bat around, I am not welcome to gaze out from the drivewayside
    the velvet waxy green, slung with two wires
  I make the note:
    the (n.t) means indexed by that, should be a Cip - they are reused for identity
   yes, Cip max reuse and Aip min reuse
mo Nov 20
  svelvet 9.0 is out
   but I really need all those things generalised, so I move on
  fix G.ts is console.log on the server
  write another ipfs server with svelte + sqlite
 tu
  more ipfs server in sqlite
   javascript + sql, a finnicky substance to develop with
   but should provide this immutable blob store
 we
  stuff -> Record
 fr
  Record/Reco(Rec)
   no particular reactivity yet
   need to follow the uplinkage from any ReConstructions
 sa
  wanting to pull some text and put into codemirror as a Recordable.
  give up on:
   zap pulseaudio fixup -> systemctl --user restart pulseaudio.service
   
 mo
  Diring C -> Record
   Co.ts
    make d.I=sc-that-inherits
    resend This after every Construct
     enacted via d.I from Diring:
      D = Construct({I:{Pi:1,sent_places:g},s:C,D})
    > caching bits of that encoding
      in DCdiffer it has the pile of change,
        to re-concat a Linesing to maybe ping over to Record
 tu
   Record/in/Diring
    to become -Rec**
     so we can make a pile of them to feed into:
    Record from Record
     unifies all the Reco
 we
  in Record/*
   it is not Record/$thing%saved
   because of time!
   are levels of the Arounding+/Recording+/Diring/...
      v here we begin encoding
   /in /Diring**
    ~~ a file
   /out/Diring+
    ~~ a tree
   /around/Recording+
    ~~ commit log
    state and its parent state, etc messily
    < cull list into an Arounding-within-itself
    < Aroundings eventually get on branches
       remember where they branched from
   /been/Arounding+
 th
    sy&store everything
  now() makes UTC
   < perhaps a UTC unix timestamp is better...
 fr
  in Record/*
mo Dec 4
  rename around|out|in for kommit|treeh|bloube
  avoid re-PUT of sto%ok
  I.midule(C,s) each sc&pi thing
 tu
  avoid relying on the display (Rec.svelte) to do things
   by doing things in Construct I.midule
   also g.send() now to "storage"
    a getContext hack instead of all that slopery
   
 we
  Record
   without any <Con/> (the display)
    doubles performance of opening some Diring/** (to 50ms)
   there are some nice io-isms around here:
    elvising a C into another process
     we have no from-diffing yet so we encode everything anyone does
    how one enters a thing in somewhere
     what it must be joined to (y&store) to reach completion
  Text / deL use isNaN(y*1) (a typescript warning)
  use REAL > TIMESTAMP, now() ms-precise unix timestamp
   so we can simply maths it.
   implied cast to number. wants *coding types...
  
  Record $C is the Record** until now
   and $B is:
    items
     a copy of bloube/*
    times
     a copy of kommit/*
 th
  Savable b.nah drops C/*
   currently the only way to stop having a saved selection in codemirror
  bop() C/kommit -> B/times
 fr
  caushion:
     $was = delete ns&z || []
   compiles to:
     var was = n.sc.z;
     delete n.sc.z || [];
   this is of course wrong...
    polite datastructuring...
  makeso doing a little sync on that
   decide to make only one Pi per s, and one Con per s
    Nat goes to Texmas in one day!
   we shall have a -Kom** structure following /kommit
 sa
  Nat took off!
  Record $B times
   /times/*-Kom can put %msg on its y&be
    they become %going
     put reactivity for this on in 4988a89556a59cc
     so we do all Kom.svelte often
      > pool cones of Construct
 su
  hacked on the Knob, opened a PR
 mo
  PR rejected, ride about
 tu
  Knob onboarded
 we
   strain a possible wayland compositor bug out of it
    https://bugs.kde.org/show_bug.cgi?id=478462
 th
  Sheesh. Need to get on with it.
  letz review.
   Record
    is saving git trees,
    which we keep in a vague pile
  now:
    g.haveC() resurrects g.C
     works around losing Record C|B on HMR
    Betime looks after:
     times/-Kom%delta
 fr
     times/-Kom%diff
      needing collect/a/**%dige to follow the trail back from treeh
 sa
  
 mo
  most of Betimes()
   commit squishing
 tu
   which shows "resolve $n" defect of Conz/*
    when they delete their s.t are scrolling up but their diffs remain fixed...
     ie each Kom doesnt understand it is an entirely different thing,
      and retains Con:3 
    set Con.t early on to s.t, for Record/B
   throw away the earlier of the two
    the going patch merges into the next one with|based-on it
 we
   -Kom%diff reactivity depends on the 'C' in:
     $: calc(), msg,level, C, s
    and none of the wake(), it turns out, was needed
     svelte remains mysterious
   fix an ipfs server race
    the error: SQLITE_CONSTRAINT: UNIQUE constraint failed: ipfs.t
     when speedily adding things, two waves dont:
      < ensure each treeh/* gets encoded with the right bloube/* Reco
     this kind of implies these are slow as? 15ms via curl, ~40ms in browser
     and the svelte dev webserver seems to be threaded
 th
  test
   'throw away the earlier of the two'
   and Con.t, which I moved to:
  Inspherical({Con,s})
   Con.t=s.t mode|style:
 sa

