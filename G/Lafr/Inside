# retro futurism

=spec
all
  from the great cold heaviness of sleep
  wake gradually
   interesting. we must arrive the chunkpile so-much (&istr_realise)
      to be able to tell what else we do
      we could go looking only for the titles we have
       if chunkpile arrived E for each indent
        then go into each as necessary
         Adj@3.1 will find A Q defs, and look up calls everywhere
          so will need a whole list of calls everywhere
           which may be stored in W:is/Fish/*, etc
             ie, ch stores defs|calls, routing to ch/**
            these call-tangles show congruence with each other, etc
             eg, parent superset-of children
             eg disparate? siblings calling the same functions (eg &Ei)
              they could also group by containing ch
         Adj@3.3 will e:say an update to a chunk, like a ghost edit
          make name clash reports about def|ch|
           an authorship is listened to
           work is spotted and somewhat intelligised
            ie compile errors in the next process
   interesting. the voice can respond to changes in demand anywhere
    it must be othered enough to connect the Dots
  emerging patterns:
   @Inc
    can host any &fetch
    
   <> (A,V)
    host, nows, hows - items, features, projects
   - ݈ _
    the 5/4 slope
    3 when we go through the drawing
    2 dives, restable
    as we lose the global mindentity
   _,-
    as we roll in exp of thing
    ⚟ and ⚞
   gesturey drag as flux creasor
   the &rollbs|&reaw craze
    vs E being the whole recipe
     unexplored in R'The'
      is mostly just dump so far
      uses %ope projected in
    I should know how an attribute should lifecycle
   as c&el or s&etc happen
    with time
    eg the usual machine of lv state transmission
     and to do compile potential 
  the coming changups:
   %Ying -> w:Travel (above %Yingu)
    is a cv|ov enlivening wave machine
   %Yingu would @Gnome the 4
    but be only slightly awake every time
    currently reloads %Abodis.** every time
     < clue @Intro that ~ in %Yingu acts should fully %Abodis
       ie a &sustrain otheration that can want to wake
   A:thing, compiling
   &Ay climbs
    knows about Aip
    so it may find the thing it was from in the unity
   all io handlers
    eg this icon thing, has toggle
     it should want to adjust Ying%something + C%glow
    thank god
     I am forgetting how to type &wants
  the coming usefulness:
   multiple unfoldings, via:
    cytoscape - graph layout
    matter.js - graph crushing
   further toyings:
    tone.js
    paper.js, image process, tracer
running
  would involve...
   https://github.com/ottypes/json0#summary-of-operations
   
  podman
   writing a Dockerfile for ~/src/excm
    which is https://github.com/vizhub-core/codemirror-6-experiments
   /var was full, moves, via iotop:
    Total DISK READ:        41.56 M/s | Total DISK WRITE:        41.75 M/s
    sudo lvremove vg_system/store
    sudo lvs
    sudo vgs
    sudo lvresize -L +10g vg_system/var
    sudo resize2fs /dev/disk/by-id/dm-name-vg_system-var
    df -h | grep vg
   podman build . -t excm
    tons of noise and waits:
   as above but ~/src/codeserv:
    change->run seems to be?:
     podman build -t cose .
     podman create localhost/cose:latest
     podman start -lia
    then these do `node -v`:
     podman run cose
     podman start -lia
   failing to get console access to them, to check on /js etc
    needs a gui to make trees, version?
    podman attach 54d51ff8976c
     says: bash: line 15: $\'\E[A\022\E[A': command not found
      # the first \ is editorial
      then at a promptless terminal
       `pwd` says /js, ten times (multiplied output)
  minikube (waste of time)
   attracted by one yaml per cluster of containers
   perhaps more recent tools will help?
   curl -LO  https://storage.googleapis.com/minikube/releases/latest/minikube_latest_amd64.deb
   sudo dpkg -i minikube_latest_amd64.deb
    🚜  Pulling base image ...
    # wanting to use podman requires the docker cluster to die:
    minikube delete
    minikube config set rootless true
    # downloads tons again
    minikube start --driver=podman --container-runtime=containerd
     🚜  Pulling base image ...
     E0823 16:26:35.759871  119977 cache.go:203] Error downloading kic artifacts:  not yet implemented, see issue #8426
    # that seems to have broken everything minikube, esp:
    kubectl create deployment hello-minikube --image=k8s.gcr.io/echoserver:1.4
     error: failed to create deployment: Post "http://localhost:8080/apis/apps/v1/namespaces/default/deployments?fieldManager=kubectl-create": dial tcp [::1]:8080: connect: connection refused
    # trying to use docker again:
    minikube delete
    minikube start --driver=docker
     Exiting due to MK_USAGE: Using rootless Docker driver was required, but the current Docker does not seem rootless. Try 'docker context use rootless' 
     # doesnt seem to have 'rootless'
     someone suggests: apt install conntrack
      After that if you get any error like juju,cric dcokered id, cric ctl not found any error it may be..
     what humour,
    https://docs.docker.com/engine/security/rootless/
     a shutdown: sudo systemctl disable --now docker.service docker.socket
     and install:
      /usr/bin/dockerd-rootless-setuptool.sh install
       [ERROR] Aborting because rootful Docker (/var/run/docker.sock) is running and accessible. Set --force to ignore.
      cat /var/run/docker.sock
       cat: /var/run/docker.sock: No such device or address
      /usr/bin/dockerd-rootless-setuptool.sh -f install # works!
      docker context use rootless
        rootless
        Current context is now "rootless"
      minikube start
        ❗  docker is currently using the fuse-overlayfs storage driver, consider switching to overlay2 for better performance
        📌  Using rootless Docker driver
        ❌  Exiting due to MK_USAGE: --container-runtime must be set to "containerd" or "cri-o" for rootless
      minikube start --container-runtime containerd
       # downloads another 400mb?
      likely to be several viruses now
      nomad was a nomad
  podman 2
   in codemirror/dev: cbf06bbe0b83a11f86c55e852b35e6033f385119
   so
    podman build -t cev .
    podman run --rm -it --name recev cev
     # can do the CMD from Containerfile
    podman run --rm -it --name recev cev bash
     # gets a terminal!
   now inside cev, @9b5eb06022e6
    node bin/cm.js install
     # shows its working more than whence part of the build script (Containerfile)
    drama:
        npm WARN EBADENGINE Unsupported engine {
        npm WARN EBADENGINE   package: 'mocha@10.0.0',
        npm WARN EBADENGINE   required: { node: '>= 14.0.0' },
        npm WARN EBADENGINE   current: { node: 'v12.22.9', npm: '8.5.1' }
        npm WARN EBADENGINE }
      theres no: find . | grep node
      or /mocha/ in: cat */package.*  | less
     then later:
        npm ERR! code 1
        npm ERR! path /js/autocomplete
        npm ERR! command failed
        npm ERR! command sh -c cm-buildhelper src/index.ts
        npm ERR! /js/node_modules/@codemirror/buildhelper/src/build.js:182
        npm ERR!         pos = next.to ?? nextPos;
        npm ERR!                        ^
        npm ERR! 
        npm ERR! SyntaxError: Unexpected token '?'
        npm ERR!     at [...]
       just goes around, also from: npm install
       ungood search: https://github.com/search?q=%40codemirror%2Fbuildhelper%2Fsrc%2Fbuild.js%3A182&ref=opensearch
       somehow in netstat:
        tcp        0      0 s:60828                 mail.marijnhaverb:https ESTABLISHED
       the fruitless, traceless (talks of /js/node_modules) npm
        may be seen from ps on the host
         under a /usr/bin/conmon with lots of repeated --exit-command-arg
         looks rusty..?
       fetch manifest, brace-expansion
        and etc is sucking up a lot of time
       so any `npm i anything` or `npm i` dies there
   now inside ~/src/codeserv on recose@1eda031bd9ac
    
      

The-ish
 -Bat
  spool clicks, replay or reinteligise them
  a Troom, pools state to introduce over there somewhere
  gets piped around: Nine/-Lab -> Thy... -> Run/The...
   and tractorbeams events etc back to the Story
    hopefully to make the next experience better
     ie not require those events, to customise layouts etc
    Verkehrung: reversal; (von Rollen auch) switching
  < rename -The?
  < -Bat style Xc (necessary locators)
      include &X_possible
      click to wildcard things:
   < -Bat can move anywhere up to The (to refer to all Eight)
       eg dragging E0:-brackios up there
        should point to all -Eight**/-seven**/-brackios
         or nearby -sevens, etc
        and the -brackios/... -Eel might also:
    < wildcard things in Xc
       esp if amongst -Array
       it can probably switch to Xc.pi
      know how many would be selected if it was wildcarded
    < same &ifc form as &voice
 path
   local
    ^9:5/RiceDay 9 into the Pot//-brackios/whole/RiceDay%wou/4/sc/sustain/n/y/act
     one -brackios looking into another
     always goes up to -seven:5
     could:
      ^^-six"RiceDay 9 into the Pot"//-...4//%%Pot/...
       -six"cantitle" <= -six:cantitle
        esp if !&Lines_types.good_k safe for :$v expr
        this could take over diag style of C|J|A...
         T'not' could describe the impulse on it now
         A:such becomes A"such"
         '' => machiney property, not .t
         "" => human meaning, generally, ie .t
        perhaps W:pic/@known'suchness terms'
         @known could be a join to descriptions here
         showing pictures about 'suchness terms'
       //- <= //-brackios
        
        
        # some object-expr mean :$v is .t, eg C:eg
        #  further into arg-ish expr space
        #   which is steepest for /$such:later
       first ... <= /whole/"$1%wou"/
        ref-from ^-brackios knows 
       second ... <= sustain/n/y/act
        is the same as the ref-from
 ref
   < when looking at %%sustain at different times
     notice when ref revisits change hash|values
    < I.$of.$t.$cv mixer, iterator
      with join to others if not mixed
       as in A.1.I and A.n.I (RX for voicing for some bit of ground)
       and its only that you were doing A:n for J that A.1.I is set

brack
 noun IRISH a cake or bun containing dried fruit.
 grows Doming for easy modelling with osc eventuality
  of many C.sc, their constellations of meaning
 substrate of -Effect, &sustain, &supetime
  which are all basically A cultures
  likely to work with each other

&sustrain
  < &sustrain gang @Into ->
    see 'the related types it bursts into'
  < text parsing with &sustrain
    Aip for inf-anywhere-postable chunks**/bits**
     bits = EXPR | expr # javascript | stylehouse
    get some of the jsBabz over here,
     to watch the string change per rule
     could diff each time =~ matches even
     end up with list of rules it uses (BQ, $var, s&k etc)
     map where lines were added
      not many rules change the number of lines? each does...
      so any wjs diff can show mostly w
    so
     would end up with something openable
     -Text, in w:Text
      is therefore a big deal, like:
       < -The? not -Bat
       < -Story, which if empty will try to make up a story from around
       < -Travel
      < do we Line="\t-Travel" if Travel-Travel?
  
  &sustrain gang #spec
   going somewhere beautiful
    subjobbies, parallels
    together in &sustrain { t:y(i,v,a) + }
    
     the y start calling back,
     and should i(s,v,c,q) to germ new sustain
     or just return when they fail
      with a.pur() or not
       origin or here perspective?
       &hajasute could lend the &sustrain perspective
        to any h act
      
     write on n%Feature async
      writing on each other
      the subjob gives|winds quality
      %%sustain.ns&* == %%sustain,*
      attend
     
     each y
      calls i(...) for itself
       can be false|el10 overall (!v)
      then
       .such(...) abilities
        coulds, woulds, shoulds
         planting more y - something that can state + OK
        supposing they are per v
         or per whatever is rows tumbling through &sustrain
     
     so abilities could be per $t y(i,v,a)
      or per i(s,v,c,q) - fullfillment of that
       $v at the other side
      or per i(...).more(about that)
      
     
     when can n=%%sustain... be written on?
      has a %%rec traction
       
     
     they seem like the step controller for &supetime
      which has very proto that
     and almost a time-dimension sort-navigator for voice
   
    the related types it bursts into:
     nowernodewant
     await poise
      demand RunSteps for elIntro/%Steps/*
    may
     be translated to Ying | supe
     nodewant: &wants      | a.pur(...wants:n)
     await ?: &wants later | a.pur(...await:opportune)
     put stuff for RunSteps
      which has the way that is changing
       a knows how to get @Run to happen if @Inc doesnt
        potentially conscious operators all the way down
    
Inc|Pro|Run
  Inc: the A:load-ing bay, does @Intro
  Pro: provisions A** questing, &Ying_waits
  Run: does A** winding
  possibly the top level callback space
  they seem to use some basic %%Go to engage each other
  
  < @Ply of other This** may clue how to time around
     where the dependencies are
      eg any Eref pointed must be there
       perhaps the pointers might &t at some selfed thing
        then referencing from &t onward on the -Ness
         -Ness would have to -Lab that &t must be around
  
   < and hire @Pro to RunStep too
     bunch of &sustrain, valley apart
     the GStep %%Go -> PStep
      GStep ref $S to Fine/*
      PStep|@Pro grants time to &Sunpit|@Run++
       later one trip through &Sunpit
        as A:n, for eg w:Tut
       may take one (asyncing) or more (Esyncing) A:n
        as Step doability is interspersed with @Run++
        even when io iterating, might @Run++ somewhere per row
      and so,
      @Pro > @Run, gives it time
      @Run++ can occur as per hire,
       eg let it do this|that C a whole bunch
       is a much tighter loop
        going from 2 extra Ying trips per @Run++ to none
       see Aip|time about how Run++ can be arbitrary
        not always per Ying wake
        the runloop could be a while

all very %%Go, #spec
    @Intro and @Gnome have e:elIntro->&diffPs thinking
     @Intro for getting it to the first nodes
     @Gnome for sequencing the change into:
     @Inc then also, takes the change, and as always:
     @Pro thinks about what it could mean
      in some non-lossy way, with @Gnome mediation possible
     @Run takes something to believe now
    so
     @Gnome RunStep > @Pro RunStep
    %%Go valleys
     are they -Effect that do Y:Easy to arrive?
     and you are -Effected by the grant
     is a long term elvis
    -Effect elsewhere eg RunningStep wants a oncer
   is
    &Effect Go:gs,...
     gs = &sustain,...
      place for its own meta, relations
     both ... depend on where in:
   Story/Thingo
    Gump realises $t ood, hires:
    Gnome checks Story/$t, hires:
    Travel makes $t/@Cat and ... by dialectic
   
   a lot
   
   of that dialectic
   is ask-compulsiveness
    eg waiting for -Lab to ready before @Run
     so they might %%Go into @Run/The the first time
    eg letting @Story catch up now
     new kind of sanity check
     allowing reality to diffuse over there for a while
    or just letting it go for it
    as in winding or cranking up A&ov
     which in &Sunpit is some sort of Aip
   is ask
    its hirer knows
     eg poise, may be now
     eg nodewant, and then poise?
   
    gang - bunch of names that get known
     eg @Cat(/*), @Gnome(/*) via Names
     eg &sustrain c.$t+

ACGT
  pre-life culture
  a science of the physical universe
  the first thing is obviously boundness
   but its really an odd combination of boundness and expansion
   the one and the many as one thing
  second is square terms, the way of light
   existence in a linguistic spiral
  gravity well
   your piles
  traction
   transfigures whatever it can find
  base set of arguments for any &h
   < switching A etc with B on any &h:
     Babz: fi&Thing,A:Al,la,ca
      -> G.h(A,C,G,T,{t:'Thing',A:Al},la,ca)
tycsc
  post-life culture
  fits human minds, universal grammar (for the faculty)
  you may arrange many c+sc hemispheres
   extra for this, or over there, or etc
  mild parallel with scq: q tying them together into the abstract
A
 fits all the concepts to it
 I should know most of A
  or reality is thinning out, certs weaken
 A anything:
  A subthing:
   it just fits text quite well...
   forking A:spec for sloped language
 shows you a transection of layered eliptoidal discs
  the latest|widest including all (that is not disincluded)
 their A%constel
  may be managed by A%X/constel,
   such that A%X can be disowned|reverted
    in case of &Bang (throw, catch)
    or eg a new A.up comes along
     eg %Sun is adopted by later
Ay
 climbs A, &Ay ... <= ^^^-seven/etc
  faking ax or returning s|N...
io
 near:
  < A.h for &hajasute
 mid:
  < a few grammars for classifying to a prototype to use
   < compile io@1, handing instructs rather than string-to-parse
      eg &Sharg,$expr=expr -> &Sharg,$expr:io@1
     the a(/match/,&{...}) becomes /match/ => ...
      which may revert to runtime regex
       or pluck a piece of inlined io@1
  
  like self-confidence for the computer language
  uses the universality of hierarchy
   ability to join disparate realities
  
  expr space
   flavours of loading up parameters
   # < write stories to figure out:
    bringing $defined or $defining in+for that expr...
      see !bind $item
      say "you have to buy it again to use in io"
      complicated by the want of Xio
       to use eg $suchindex in a non-lexical sense
      but is it?
       perhaps we compile in their defs anywhere prior:
        as $suchindex = qas('suchindex','t')
         see w:Fish / X
       perhaps conversely, a lexical is got for index use
        say "get free lexical with index use"
         < is free re a lexical budget, play money.
        ie, $suchindex becomes a lexical
          for you to examine the space around $s
         in addition to the $s (perl $_)
      anyway
      perhaps X/suchindex=$someval?
       conflicts with C/such for bareword C'such'
       perhaps we would know if X index or C bareword would be used
        eg in this example it is being set to something
         maybe it could be glob: o X/suchindex*
        it should be possible to X.such = x
         I think we X.such.1 = x for now?
          see the odd glob functionality of &Xsomp
        after all, C are basically just islands to put more in
         the actual attachment being made however anything adjusts it to be
         which should start # heur-istically
         then %TX play with
         compile into qas() or io statement
       perhaps barewords are no more,
        if cm can have its perl mode adjusted to know io
         which could be a bunch of markers compiled into of:ghost
        then:
        X/#suchindex=$someval
         looks silly/
       perhaps barewords are no more,
    $key:2spec expr
     could mean more, see below
     wants to also mean eg A:thing, io:dialect, io@1 (compiled)
    and implications, vaguenesses
     marked # heur
   X/$suchindex=$someval
    bind $someval
    X climbs $suchindex
     that is, X.suchindex.$someval = x
      (usu. may unpack $someval more)
     so these look lexical but are just index name expr
    Name this @suchindex
     may then be joined to later X/$suchindex
   X/$suchindex:something
    bind $suchindex
     perhaps we know it is not a lexical at compile
    Name this @something
     kind of a named capture
     # < the $key:2spec expr:
     not the eg $expr:io@1 expression,
      which gives some object identifier there
      a powerful prescriptive
      it would depend on your io dialect
       eg &Saturn might have more $things:
      perhaps it is always available:
       eg $expr::io@1
        type of thing (io) + state (@1) to get it to
   X/@something
    join the @something there
     i|o decides INSERT|SELECT
    may know how to index @something items
     eg X/$nin=@something, following on from src?
      $nin <= $nodes_within
     or,
     # < semi-determinate scheme, for bootstrap: # heur
      currently we guess at t|s a bit in &Shx
      it should be definitely guessable by X + rows @3
      and then remember that, see Xq schemes
   C/@something
    join C/* to those items
   C/$suchindex=$somewhere
    implying C//X/$suchindex=$somewhere
    the /$suchindex= gives it away?
   C/$item:something
    bind $item
    Name this @something
    normal
    antithesis: see $key:2spec
   
   and for &h calls:
     # the &h may be compiled out, as in me&directly
   &suchfunc,$item:something
    # was meaning bind $something as 'item'
    for I.i.suchfunc to interpret
     may be a 2spec, see $key:2spec
   &suchfunc,$item=something
    set string
   fat&suchfunc
    fatal suchfunc, is I.fat.suchfunc
    as such, the&calls are for I.the@1
     &voice may know about calls via I.i.calls@6 etc
      # 6 looks like an o(utput) and an i(nput)
      #  an om+shape maker
   &suchfunc $item=$la
    named parameter for &suchfunc perspective
    may param $item=&inline,la
    is more futuristic, allows further expr:
     $item.aspect=$la
      and then breaking down a huge missing part of code:
   nesting lines within each other
    logic wants to cluster
   
   !bind $item
    eg in:
     C/$item=something
      $item will be defined in iterations eg S o ...
     &suchfunc,$item=something
      $item is on the receiving|&suchfunc end
    forces code(ers) not using arg order, anyway
     to space things out more
    they
     dont bind $item
      it is more like defining $item there
  
  tricks
   $eC = o ... # buy lexical
   o e)%C # implies s**->R** change
   o ... or return # does that
     similar to avoiding further expr once empty
   $key:2spec expr and could fit format
    where 2spec|$ark|name starts with \W
    https://www.rustnote.com/blog/format_strings.html
     ie cast the operand ($key) to those forms

  buy lexicals per sub, unit of space like room
 far:
  u pg
   bringing backendistry:
    osc sync W or less to tables
   optimisables per the self
    https://blog.crunchydata.com/blog/postgres-indexes-for-newbies
     which the io expr might have an orbit of expr about
Babz
  n ...
   usual put things on the grounder
   ... may wander off to io into a parameter
   on the following lines, at indent <4
    are further parameters, expr, etc
  $such = n ...
  $n:Fine
   looking for %Name, may be near A:n, or far
   that is, at the start of the line with nothing much else
    they dont A:n if mentioned like a &t, for some ark...
  throw 'such' as well
    %Error cant read the (non-stringifying?) er object unless you throw "such"
  throw "such", $named:thing, $params
     like ~|&c|&com, want to know the names of variables sent
      although we can usually find the line of code
     should be kind of loose, as in:
  &call $with=stuff
   params! expr even...
  &call,'stuff'
   also, usually
  &jaa,... .suchkey
   know N = &jaa, N[n], ns%suchkey is meant
Od
  getting into Yingu on the left, ie @Do map
   top left: new
   buttom left: kommit
  and @Be on the right, kind of feedback
   top right: quit
   bottom right: control sound
  mouse-in widens the staircasery
   faster in if y <50%
   slower in where vertical titles are
    see Codon doesnt do much of this, only min move distance or so
        would be nice to have the latest 3-5 names vertically in x=0-1em
         edges + corners of the screen are most easily pointed at
T
  %TX to %RX
   want an io flavour
    know qua.ope is number
     on its way in (to an -aq)
    know the two+ times it can leap out,
     as well as iterative match when identity grows
      all sorts of stuff can be described for a C**
       presence of any %TX for desc thing can cause desc to try early
       eg a previous state of D** @36 can sleep laters
        ie osc doesnt wake up
lang
  see codes for the styles of writing
  - new lang compiles to old lang
     that the computer already understands
  - computer understands new lang
  compilers are a step up to a new lang
   "many more powerful expression mechanisms could be used by programmers than mere classes and procedures"
   https://ziglang.org/download/0.9.0/release-notes.html#Self-Hosted-Compiler
  you can always type less
   its nice to break through to a new language
   and type more with less
   "typing less causes death"
  lang design for merge
   minimise odds of it merging unpredictably
    esp avoid changing meaning as a result of some merge strategy
     getting 'it' in a lump helps
   while having unpredictable content
   see resolve $n

123456789
  extra chakras
  wrote lots on this in 2015?
  indicates miraculous meaning(lessness)?
   it could gho either way


codes
 Bureaucratese
  avoid, though computer is mostly playing office
  https://entnemdept.ufl.edu/frank/kiss/kiss18.htm
 spec
  most seriously in blocks of: =keyword...=cut
   eg, this very text
  also any: # comment on how it is
  or: # < how it should be
  conventions:
  
   indents matter
    may indented thusly
     refers to some potential of the former
    thenceward lines elabourate
     on the matter it is in
    perhaps is something we are not sure about yet
      pre-tangent
     a possible feature, maybe outlandish
     may break the language (truth) around it
      # com tangent: eg break is hilighted.
      #  not in the same headspace as the writing
      #  sometimes narrating history, eg bad idea because ...
   
   blank lines mark chonks?
    also questions can be asked, imply /^perhaps/
    the items along an indent are separate
     though the first one is likely to run on from the former
   
   cleverness of the expr
    should stay at some low level
    be as supersensible as the situation wants
    yet be available from general sense
     eg the previous 7-chunk =~ /matter/
      # orthogonal awareness, perhaps of itself
       not if see # we keep holding onto the first Q ever
        that is a link, to a comment, so is in code
       btw (another orthogonal, out of: codes / spec)
        -chunk can have a diag|expr style of its own:
         the number in front means yay many lines (geo)
         pi in front, number is either:
          Aip:chunk: -chunk@3.24.2
           may climb slope to @3
            or @3 may be a geometry (lang dependent)
        -is~/for such/ is a text search pi, etc
    tos[]
     means tos = [...anything]
   refers to itself
    spec / refers / spec is where we are now
     if the latter 'spec wants to be longer'
    see &suchfunc / if $n
     approximate chunk of &suchfunc to look at
    see resolve $n
     is the most popular reference to make
     # a cruxical ramble for computer science:
     about the trickiness to distributed lists
      that X solves by way of multiple X/*/$n
       and our selection of parts we are redoing
        eg you i the -Ness to be the canonical set now
         ie tractioning %%dome=-Ness (hypothetical)
          over an order wandering members of %%dome=-Ness|-Lab
         so drop the other -Ness, but keep the -Lab around them
          < try to gc|merge the -Lab for goners?
            the %TX may only %RX the goner, etc
            all dropped -Bat should pile up somewhere
             especially if associated to -Lab
         particular -Lab could be o during the sequence
          to involve at points in the cartesian redo
     @Gnome/&RunStep
      means the &RunStep part of the @Gnome process
      better written @Gnome / &RunStep
      similar may be an io expr
     &Eref(lookup/climb) <= &Ereflookup / &Erefclimb
      as above
   expr
    @2 is a time, or cv
    v@2 means a 20mm, one line view of a value
     eg Ctitle: Thing 3
      which could also be described as Thing@3
       but usually the @2 in an expanse they will travel
    
    expr:Cid
     the expr for eg A:thing, C:such, or &proc:id
    expr:subarg
     the sub and the arg you (can) give it
     eg &Eref c, &Xsim c.array, &sustrain c.$t+
     may mean the c returned
     or the c you (can) give to the &Eref* suite of things
     # kinda OO: c is a hemisphere of data, subname the code
    
    Aspeck
     aspect of that thing
     a topic, not a particular feature
     eg Ay: going into the A. climbing.
     eg Aline: the A may select amongst bits
     eg Cid: any C (even A etc) can draw some uniquing -Eight.t
     eg Gtime: unix time, may be offset for G-wide timetravel
      you may get your offset via A, yet:
     eg Atime: all about Aip
     eg Aip: hot topic, solve a lot of memory|crux issues
     kinda:
     eg cid: or idc, how to name random c (see &sustain)
      esp if that name is used internally
      see also expr:subarg, eg &Xsim c
    
    io bits/inside
     is kind of what language implies
      loose use eg: title Try@5 JugRice *
    regexp|js|etc are also about|mixed
    shell:
     alternations, eg lou{d,der} <= loud louder
      < row-slope for what it multiplies. the leg?
     eg having a {house,family,grandkids} at the right time
    ie <= that is
    eg gives example
     inners like so discuss|continue it
   a question?
    is up for debate|clarity|art
     eg:     e:r to @Gnome itself is reliable?
      whereas:          ...itself should be reliable
       sounds like something that needs to be built
   < todo
     needs to be built
      usual fraying off about things here
     and other deps
     may seem to conclude that:
   < some other todo
   > too much to do any time soon
      all a lower priority than any < todo
   <<<
    marks a frontier
    all the beyonds are implicitly /^</
    indent independent, merely a marker
     to slide down the todolist
   
   terse <= large implied expr
    a compression
    also, a todo:
    < D encoding (see osc Komp) made of these
   thing => its properties
    an expansion
    < compiler as nested these
       ie take meaning => in,forms  =>  action => of,forms
       opportuning into certain definable idealisms
        deep within meaning (of some complicated expression)
       eg detect specific dialect|feature and adjust the how
        eg $thing = o suchness
         needs to pick ays&thing|s out of suchness
          suchness may itself be io, &Sharg, etc
           eg &Sharg would add .N[0] to pluck result
 
 spec > notes,cal,todo...
     notes
      casual spec, eg w:a
      some relaxed panache
     cal
      headings indenting per:
       2 weeks, 1 day, day item, subitem, discussion**
      structure of w:a before shattering into:
     todo
      first first
       larger clusters evolve into spec/*
      eg later w:a, which seems to only grow?
       < stats about grow|shrink of /^</ there, anywhere
     not
      casual notes
       input only, text only, like `cat >> not`
        with next commit
        < stylehut should: put away Story/$now/-not for each session
      maximum relaxed panache
      link dump, try and label, timestamp things
      always at x:50%,y:100%
     drugs
      stuff people have written on various drugs
       some of which can describe quite clearly
        how to build the universe etc
        handy knowledge to have
      -> trippy visuals
       the universaliser
 
 # for the computer
 stylehouse
  raku -> raku
 stylehut
  what raku compiles -> js
  will be what runs stylehut
   the first real stylehouse website
   so compiling will rely on you getting serve.raku
    or public compile infrastructure
    or someone will get the grammars working in js
    < have a look at acorn.js
  superset of:
 styleshed
  what &JaBabz compiles -> js
  mostly compatible with &CoBabbler ( -> perl)
  
trifecta
 lum
  in no c u lum
  dim the light of the mind
   is a good way. see Huxley / reducing valve
  turning down|up the intensity of information
  here|there|how
 cyc
  global winding through Cy&* topics etc
   the possible expressions having their time in the sun
   highly educational background effigies:
 fig
  pronounced "effigy"
  background processes sync with your foreground
  foreground being Story/*
   eg wandering through Codo**,
    linked code showing in fig:is
   eg esp making %TX, you want to see where it %RX
 nod
  head tilt as an input mode, like Ctrl
  
=cut