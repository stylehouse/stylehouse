# islands
S 1 fetch ghost
    A.h.sixc = 'expectλ,first_truest'
    $h = A.h.o('fetch ghost')
    $c = {init:['givefive','Runin'],aft:['mute_synco','AXV']}
    $Fish = me&Fishliver,c
    
    # 3 steps because we await &fetch then &add_script
    # < dont come all the way in here:
    #    GoRun needs a will to do Fishlive, or:
    #     
    Fish.S("alittlestep",&AWVT{
        Wc&iv > 6 and return fi&com,"lotsiv",{W}
        if (Wc&iv == 1) {
            fi&remove_script,'/wjs/Easiness'
        }
        
        fi&YA,"Leopardo" (&A{
            # what we edit, source, uncompiled
            $gh = fi&Ath,A,{of:'ghost',t:'Easiness'}
            # bunch of code in a sub
            $w = fi&Ath,A,{of:'wjs',t:'Easiness',args:'J'}
            # < of:me: as above
            #    except we have compiled s/me/this/g
            #     and stored at $W/1.js
            #   then we call the function with new a me={}
            #   then copy a bunch of them together to form a mind
            #    possibly does patches to individual me.*?
            # > of:Ijs: &add_script, loadI
            #    so P%I is to be got, as A.5%I starts everything else
            #    possibly does patches to individual me.*?
            #!w and return
            $W = fi&Ath,A,{of:'W',t:'Sleigh'}
            !W and return
            $says = dis(w)
            fi&Xsimp,A,{says},{n:w}
            $c = {A, ghosdig:dig(ghs&string), wjsdige:ws&dige}
            fi&com,"Completo",c
        })
        # see &Ring, Piing
        #fi&YAing
        # everyone wants to exist
        fi&com,"Everyone..."
        Wc&iv == 1 and fi&YAtjoinable,A
        fi&elvising_onward
    })
    
S 2 complanet in syncopation
    # the want of a callback to occur within Run time
    # bumping GoRunR
    A.h.sixc = 'expectλ,first_truest'
    $h = A.h.o('complanet in syncopation')
    $c = {init:['givefive','Runin'],aft:['mute_synco','AXV']}
    $Fish = me&Fishliver,c
    Fish.S("alittlestep",&AWVT{
        $W = Vc&s
        A&main = &{
            fi&com,'butterfly'
        }
        $sometime = &t{
            # here are the two wakeysockets
            a&seemingly = {
                t,
                Fish: 4c&live&&'awake',
                Planet: A.5[4].sc.current&&'awake',
            }
        }
        fi&com,"Everyone..."
        $things = {just:1}
        if (Wc&i == 1) {
            sometime("inside")
            fi&yl,0.01 (&y{
                # notice not being awake
                sometime("outside")
                
                if (0) {
                    # < GOING, &complacement will &e_GoRun if needed
                    # slight wake Run with GoPara
                    $yc = {t:"outsidesaying",do:&AWVT{
                        # capturing state of things
                        fi&com,'hadtosay',{things}
                    }}
                    fi&e_GoRun,'outin',yc
                }
                fi&com,'hadtosay',{things}
                
                # change state of things
                things.also = 2
                
                # 4%todo++ leads to next frame
                fi&Yjoin,A,'latchmo'
            })
        }
        else {
            ac(A,'nonfirst iv',{seemed:a&seemingly.t})
        }
        a&Harvel = G&peel,"that,ch"
        Wc&i == 1 and fi&Yjoin,A,'latchmo'
        fi&elvising_onward
        # V, the A:RunGo Sunpitter!
        # <   and Fish.S(&AWVT{ V.tys })
        #   then we may need to adjust &t to find A.5.4 if A.5.4!=.4
        if (Wc&i == 3) {
            # now slightly obfuscated, since syncserve() while live
            #  leads to ^^%JRom%elvoids += e to pack (treeing)
            #$ec = ex({},Wy&current_Run_elvis.c)
            #delete ec.wake
            $N = me&through_packs,Wy&current_Run_elvis
            h.hat('re-sync e:Run',N,{dl:2})
        }
    })
    Fish.S("look again",&AWVT{
    })
    
    =pod
    S 3 formula
    # the want of a callback to occur within Run time
    # bumping GoRunR
    A.h.sixc = 'expectλ,first_truest'
    $h = A.h.o('complanet in syncopation')
    $c = {init:['givefive','Runin'],aft:['mute_synco','AXV']}
    $Fish = me&Fishliver,c
    Fish.S("alittlestep",&AWVT{
        $W = Vc&s
        
        
    })
    =cut
    
    # <<<
    # we have a chance now to define the new A,me
    #  since we pull in all the code
    # mostly:
    #  < toc each of:ghost
    #     for %Code, into Codap maps
    #     < toggle non-selected cm to %dis:0
    #   
    #   new me collation
    #    me.I_Thing = &{ [mindC+] } for voice:Ring
    #     and something derived from &Ying
    #      which for some reason became the name|type of the A.4...
    #    
    #   @Search, %ting%Gens W:Thy
    #   interpret !me.$function errors, suck subs out
    #   html writer
    #    should escape a lot of code?
    #    A:Display
    
    # < fixup some comment jargon
    # < -Log can probably sleep once @3** picture taken
    
    # < to &com -> This** when async
    #    if we're not 4c&live or 54s&current|thinking (Fish or Planet)
    #     then we can tunnel into Run:$W
    #      which will have been told of the ploy
    #       to ambiently Fishlive, no steps
    #     grab a working &complace about being async
    #      which is really just a -six shooter
    #       engaged for an -Eight, over time-seven
    
    # < electroding between each line, animating the -Difmo...
    # misc:
    # < hat $t should be airtight: allow /, %stuff, -pi in titles
    # < Push fails to reself|DIY?
    # < notice 2GB processes and similar
    # phi = 1.618
    # anyway, the Story goes:
    
    # fi&test_Attention,2
    
    
    # <<<
    
    #  < This** wants a new sense of time: for all -six?
    #     per -six created in a different -seven to the last one
    #     so many -seven*/-six* can be created frantically
    #      yet 1/4-six knows it came right before 2/2-six
    # be %string-wobs
    #  < further The development there (for Thens)
    #     can it be bound to sheer time like This is (will be)
    #     separating %TX change until such is
    
    # < @is: check which of w:The / &honly etc are used anywhere
    # < W storage that $t/(W|J)/$t (or is it I|O?)
    
    # < This->Nine robusticised, two brittles:
    #  try reself if after Push
    #   also if Ness new, reset and RunStep once
    #  < switching h.hat<->h.Bow
    #      requires reset (@JRom tt:reset)
    #     as RE/E pile up in This** ?
    #      for some reason not escaping &forgetRunStep
    #  < adding -Eight, after Push
    #      requires reself (@Fest tt:Leave)
    #     ninec&gobble seems busted
    #      splits news to new Ness
    #     only after Push
    # < cm: C+[ indent 1 space
    # < cm: if-and flipper.
    #    are draggable chunks - gestures mapped
    # < cm: indent within a blob of #
    # < cm: pulling This into Code or vise-versa
    