# islands
S 1 fetch ghost
    A.h.sixc = 'expectÎ»,first_truest'
    $h = A.h.o('fetch ghost')
    $c = {init:['givefive','Runin'],aft:['mute_synco','AXV']}
    $Fish = me&Fishliver,c
    
    Fish.S("alittlestep",&AVT{
        $W = Vc&s
        Wc&iv > 3 and return fi&com,"lotsiv",{W}
        
        fi&YA,"Leopardo" (&A{
            A&deeps = 2
            $w = fi&Ath,A,{of:'ghost',t:'Easiness'}
            !w and return
            $says = dis(w)
            fi&Xsimp,A,{says},{n:w}
            fi&com,"Completo",{A}
        })
        # see &Ring, Piing
        #fi&YAing
        # everyone wants to exist
        fi&com,"Everyone..."
        Wc&iv == 1 and fi&joinjoinableAt,A
        fi&elvising_onward
    })
    # < electroding between each line, animating the -Difmo...
    # misc:
    # < hat $t should be airtight: allow /, %stuff, -pi in titles
    # < Push fails to reself|DIY?
    # < notice 2GB processes and similar
    # phi = 1.618
    # anyway, the Story goes:
    
    # fi&test_Attention,2
    
    
    # <<<
    
    #  < This** wants a new sense of time: for all -six?
    #     per -six created in a different -seven to the last one
    #     so many -seven*/-six* can be created frantically
    #      yet 1/4-six knows it came right before 2/2-six
    # be %string-wobs
    #  < further The development there (for Thens)
    #     can it be bound to sheer time like This is (will be)
    #     separating %TX change until such is
    
    # < @is: check which of w:The / &honly etc are used anywhere
    # < W storage that $t/(W|J)/$t (or is it I|O?)
    
    # < This->Nine robusticised, two brittles:
    #  try reself if after Push
    #   also if Ness new, reset and RunStep once
    #  < switching h.hat<->h.Bow
    #      requires reset (@JRom tt:reset)
    #     as RE/E pile up in This** ?
    #      for some reason not escaping &forgetRunStep
    #  < adding -Eight, after Push
    #      requires reself (@Fest tt:Leave)
    #     ninec&gobble seems busted
    #      splits news to new Ness
    #     only after Push
    # < cm: C+[ indent 1 space
    # < cm: if-and flipper.
    #    are draggable chunks - gestures mapped
    # < cm: indent within a blob of #
    # < cm: pulling This into Code or vise-versa
    